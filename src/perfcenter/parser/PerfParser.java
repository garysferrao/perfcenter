/* Generated By:JavaCC: Do not edit this line. PerfParser.java */
package perfcenter.parser;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.*;
import perfcenter.baseclass.*;
import perfcenter.baseclass.enums.*;
import perfcenter.baseclass.exception.*;
//import perfcenter.simulator.SimParams;
@SuppressWarnings("unused")
public class PerfParser implements PerfParserConstants {

        static PerfParser parsr,parsr2;
        static Logger logger = Logger.getLogger("perflog");
        static ConsoleAppender appender = new ConsoleAppender(new PatternLayout());


  public static void main(String args[]) throws Exception {
        int i=0;
        String arg="none";
        SolutionMethod m=SolutionMethod.NONE;
        SysType t=SysType.NONE;
        logger.setLevel((Level) Level.INFO);
        logger.addAppender(appender);
        ModelParameters.inputDistSys = new DistributedSystem();
        try {
                while (i < args.length && args[i].startsWith("-")) {
            arg = args[i++];
            if (arg.equals("-a")) {
                m=SolutionMethod.ANALYTICAL;
                //System.out.println("Analytical solution");
            }else
            if (arg.equals("-s")) {
                m=SolutionMethod.SIMULATION;
                //System.out.println("Simulation ");
            }else
            if (arg.equals("-o")) {
                t=SysType.OPEN;
            }else
            if (arg.equals("-c")) {
                t=SysType.CLOSED;
            }
            if (arg.equals("-d")) {
                logger.setLevel((Level) Level.DEBUG);
            }
            if (arg.equals("-q")) {
                logger.setLevel((Level) Level.ERROR);
            }
        }
        if (i == args.length)
                throw new Error("Usage:  java [-d] [-a|-s] perfcenter file");
        arg=args[i];
        parsr = new PerfParser(new java.io.FileInputStream(arg));
//        logger.info("Input file "+arg);
        ModelParameters.setSolutionMethod(m);
        ModelParameters.setSystemType(t);
//        logger.info("Started at "+Helper.timeNow());
        PerfParser.InputFile();
        //InputParams.ds.print();
//        logger.info("Completed at "+Helper.timeNow());
    }
    catch(java.io.FileNotFoundException e) {
        logger.error("PerfCenter:  File " + arg + " not found.");
        e.printStackTrace();
        return ;
    }
  }

  static final public void InputFile() throws ParseException, DeviceNotFoundException, Exception {
        Task task;
        SoftServer serv;
        //Host host;
        Scenario sce;
        VirtualResource res;
        Statement stmt;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCENARIO:
      case VARIABLE:
      case DEVICE:
      case DEPLOY:
      case UNDEPLOY:
      case HOST:
      case SERVER:
      case TASK:
      case VIRTRES:
      case POWERMANAGEMENT:
      case LAN:
      case LINK:
      case RESPT:
      case WAITT:
      case UTIL:
      case QLEN:
      case POWER:
      case EPERR:
      case PDP:
      case PEFF:
      case TPUT:
      case BPUT:
      case GPUT:
      case BUFFTIMEOUT:
      case DROPRATE:
      case AVGSERVT:
      case QPARMS:
      case BOTTLENECK:
      case BLOCKPROB:
      case PRINTCFG:
      case ARATE:
      case ANALYSE:
      case FREQ:
      case FOREACH:
      case FOR:
      case SET:
      case PRINT:
      case IF:
      case WHILE:
      case BREAK:
      case MODELPARAMS:
      case LOADPARAMS:
      case WORKLOAD:
      case NUMBER:
      case IDENTIFIER:
      case 145:
      case 160:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEVICE:
        DeviceDef();
        break;
      case POWERMANAGEMENT:
        PowerManagementDef();
        break;
      case VARIABLE:
        VariableDef();
        break;
      case LAN:
        LanDef();
        break;
      case LINK:
        LanLinkDef();
        break;
      case VIRTRES:
        res = VirtualResourceDef();
                                                 ModelParameters.inputDistSys.virRes.add(res);
        break;
      case HOST:
        HostDef();
        break;
      case TASK:
        task = TaskDef();
                                     ModelParameters.inputDistSys.tasks.add(task);
        break;
      case SCENARIO:
        sce = ScenarioDef();
                                         ModelParameters.inputDistSys.scenarios.add(sce);
        break;
      case SERVER:
        serv = ServerDef();
                                         ModelParameters.inputDistSys.softServers.add(serv);
        break;
      case DEPLOY:
        DeployDef();
        break;
      case RESPT:
      case WAITT:
      case UTIL:
      case QLEN:
      case POWER:
      case EPERR:
      case PDP:
      case PEFF:
      case TPUT:
      case BPUT:
      case GPUT:
      case BUFFTIMEOUT:
      case DROPRATE:
      case AVGSERVT:
      case QPARMS:
      case BOTTLENECK:
      case BLOCKPROB:
      case PRINTCFG:
      case ARATE:
      case ANALYSE:
      case FREQ:
      case FOREACH:
      case FOR:
      case SET:
      case PRINT:
      case IF:
      case WHILE:
      case BREAK:
      case NUMBER:
      case IDENTIFIER:
      case 145:
      case 160:
        stmt = StatementDef();
                                     stmt.execute();
        break;
      case LOADPARAMS:
        LoadParamDef();
        break;
      case MODELPARAMS:
        ModelParamDef();
        break;
      case UNDEPLOY:
        UnDeployDef();
        break;
      case WORKLOAD:
        ModelWorkLoad();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public void DeviceDef() throws ParseException {
                        Token name;
    if (jj_2_1(3)) {
      jj_consume_token(DEVICE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        name = DeviceName();
                      ModelParameters.inputDistSys.devices.add(name.image);
      }
      jj_consume_token(END);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEVICE:
        jj_consume_token(DEVICE);
        name = DeviceName();
                              ModelParameters.inputDistSys.devices.add(name.image);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void VariableDef() throws ParseException {
                       Variable var;
    if (jj_2_2(4)) {
      jj_consume_token(VARIABLE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        var = VariableDetail();
                        ModelParameters.inputDistSys.variables.add(var);
      }
      jj_consume_token(END);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        jj_consume_token(VARIABLE);
        var = VariableDetail();
                                   ModelParameters.inputDistSys.variables.add(var);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public Variable VariableDetail() throws ParseException {
                                Token name; Token val;
    name = VariableName();
    val = jj_consume_token(NUMBER);
     {if (true) return new Variable(name.image,new Double(val.image));}
    throw new Error("Missing return statement in function");
  }

  static final public void LanDef() throws ParseException {
                        Token name;
    if (jj_2_3(3)) {
      jj_consume_token(LAN);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        name = LanName();
                   ModelParameters.inputDistSys.lans.add(new Lan(name.image));
      }
      jj_consume_token(END);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAN:
        jj_consume_token(LAN);
        name = LanName();
                        ModelParameters.inputDistSys.lans.add(new Lan(name.image));
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void LanLinkDef() throws ParseException {
        Token n, name1,name2;   LanLink l1;Token unit;Variable v;
    jj_consume_token(LINK);
    n = LinkName();
    name1 = ValidLanName();
    name2 = ValidLanName();
     if(ModelParameters.inputDistSys.isLink(name2.image,name1.image) == true){
          {if (true) throw new Error("Line no:"+n.beginLine+" link with lan's "+name2.image+" and "+name1.image+" is already defined");}
      }
        l1 = new LanLink(n.image,name2.image,name1.image);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROP:
      case TRANS:
      case HEADERSIZE:
      case MTU:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MTU:
        jj_consume_token(MTU);
        v = Variable();
        unit = jj_consume_token(BYTES);
                               l1.addMTU(v,unit.image);
        break;
      case PROP:
        jj_consume_token(PROP);
        v = Variable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MS:
          unit = jj_consume_token(MS);
          break;
        case PS:
          unit = jj_consume_token(PS);
          break;
        case NS:
          unit = jj_consume_token(NS);
          break;
        case US:
          unit = jj_consume_token(US);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                       l1.addPropDelay(v, unit.image);
        break;
      case HEADERSIZE:
        jj_consume_token(HEADERSIZE);
        v = Variable();
        unit = jj_consume_token(BYTES);
                          l1.addHeaderSize(v, unit.image);
        break;
      case TRANS:
        jj_consume_token(TRANS);
        v = Variable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BPS:
          unit = jj_consume_token(BPS);
          break;
        case KBPS:
          unit = jj_consume_token(KBPS);
          break;
        case MBPS:
          unit = jj_consume_token(MBPS);
          break;
        case GBPS:
          unit = jj_consume_token(GBPS);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                             l1.addTransRate(v,unit.image);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END);
   ModelParameters.inputDistSys.getLan(name1.image).addConnectedLan(name2.image);
  ModelParameters.inputDistSys.getLan(name2.image).addConnectedLan(name1.image);
  ModelParameters.inputDistSys.links.add(l1);
  }

  static final public void HostDef() throws ParseException, DeviceNotFoundException, Exception {
                                                         Token name,n;Host h;String hostnme="";
    jj_consume_token(HOST);
    name = HostName();
    jj_consume_token(143);
    n = jj_consume_token(NUMBER);
    jj_consume_token(144);
                hostnme=name.image;
                h=new Host(hostnme,1);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RAM:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      HostDetail(h);
    }
    jj_consume_token(END);
                ModelParameters.inputDistSys.hosts.add(h);
                int totHosts =  new Integer(n.image);
                for(int i=2;i<=totHosts;i++){
                        Host cpy = h.getCopy(hostnme,i);
                        ModelParameters.inputDistSys.hosts.add(cpy);
                }
  }

  static final public void HostDetail(Host h) throws ParseException, DeviceNotFoundException, Exception {
          Token name;  Variable v;      SchedulingPolicy pol; PowerManagementGovernor gov;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RAM:
      jj_consume_token(RAM);
      v = Variable();
                                                                 h.addDeviceBuffer("ram", v);
      break;
    case IDENTIFIER:
      name = ValidDeviceName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
        jj_consume_token(COUNT);
        v = Variable();
                                 h.addDeviceCount(name.image,v);
        break;
      case BUFFER:
        jj_consume_token(BUFFER);
        v = Variable();
                                 h.addDeviceBuffer(name.image,v);
        break;
      case SPEEDUP:
        jj_consume_token(SPEEDUP);
        v = Variable();
                                  h.addDeviceSpeedUp(name.image,v);
        break;
      case SCHEDP:
        jj_consume_token(SCHEDP);
        pol = SchedPolicy();
                                      h.addDeviceSchedPol(name.image,pol);
        break;
      case POWERMANAGED:
        jj_consume_token(POWERMANAGED);
                            h.setDeviceAsPowerManaged(name.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOVERNOR:
          jj_consume_token(GOVERNOR);
          gov = PMGovernor();
                                        h.addPMGovernor(name.image, gov);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SETSPEEDLEVELINDEX:
            jj_consume_token(SETSPEEDLEVELINDEX);
            v = Variable();
              if(gov == PowerManagementGovernor.USERSPACE)
               {
                     h.addSetSpeedLevelIndex(name.image, v);
                }
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      case PROBEINTERVAL:
        jj_consume_token(PROBEINTERVAL);
        v = Variable();
                                     h.addProbeInterval(name.image, v);
        break;
      case GOVERNOR_UP_THRESHOLD:
        jj_consume_token(GOVERNOR_UP_THRESHOLD);
        v = Variable();
                                                 h.addGovernorUpThreshold(name.image, v);
        break;
      case GOVERNOR_DOWN_THRESHOLD:
        jj_consume_token(GOVERNOR_DOWN_THRESHOLD);
        v = Variable();
                                                   h.addGovernorDownThreshold(name.image, v);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/****************************************************************************/
  static final public void PowerManagementDef() throws ParseException, DeviceNotFoundException {
                                                            Token name;
    jj_consume_token(POWERMANAGEMENT);
    name = ValidDeviceName();
                // we have device name here; Set it's PowerManaged attributes here.
                // All devices having same device-name will inherit these attributes
                Device dev = new Device(name.image);
                ModelParameters.inputDistSys.powerManagedDevicePrototypes.add(dev);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPEEDLEVELS:
      case POWERCONSUMEDLEVELS:
      case PROBEINTERVAL:
      case GOVERNOR_UP_THRESHOLD:
      case GOVERNOR_DOWN_THRESHOLD:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      PowerManagementDetails(name, dev);
    }
    jj_consume_token(END);
            if(dev.totalFrequencyLevels != dev.totalPowerLevels){
             {if (true) throw new Error("Please provide the correct pair for Speed and Power levels :  Line:"+name.beginLine+" Column:"+name.beginColumn );}
            }
            if(dev.totalFrequencyLevels != dev.totalIdlePowerLevels){
             {if (true) throw new Error("Please provide the correct pair for Speed and Idle Power levels :  Line:"+name.beginLine+" Column:"+name.beginColumn );}
                }
  }

  static final public void PowerManagementDetails(Token name, Device d) throws ParseException, DeviceNotFoundException {
          Variable v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPEEDLEVELS:
      jj_consume_token(SPEEDLEVELS);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        v = Variable();
                           d.addSpeedLevels(name.image, v);
      }
      jj_consume_token(END);
      break;
    case POWERCONSUMEDLEVELS:
      jj_consume_token(POWERCONSUMEDLEVELS);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
        v = Variable();
                                                d.addPowerConsumedLevels(name.image, v);
      }
      jj_consume_token(END);
      jj_consume_token(IDLEPOWER);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        v = Variable();
                                     d.addIdlePower(name.image, v);
      }
      jj_consume_token(END);
      break;
    case PROBEINTERVAL:
      jj_consume_token(PROBEINTERVAL);
      v = Variable();
                                         d.addProbeInterval(name.image, v);
      break;
    case GOVERNOR_UP_THRESHOLD:
      jj_consume_token(GOVERNOR_UP_THRESHOLD);
      v = Variable();
                                                   d.addGovernorUpThreshold(name.image, v);
      break;
    case GOVERNOR_DOWN_THRESHOLD:
      jj_consume_token(GOVERNOR_DOWN_THRESHOLD);
      v = Variable();
                                                        d.addGovernorDownThreshold(name.image, v);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**************************************************************************************/
  static final public Task TaskDef() throws ParseException {
                        Token name;     Task task;
    jj_consume_token(TASK);
    name = TaskName();
                                task = new Task(name.image,name.beginLine);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRTRES:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      TaskDetail(task);
    }
    jj_consume_token(END);
          {if (true) return task;}
    throw new Error("Missing return statement in function");
  }

  static final public void TaskDetail(Task t) throws ParseException {
                                Token name;     Distribution dist; VirtualResource res;
    if (jj_2_4(2)) {
      name = ValidDeviceName();
      jj_consume_token(SERVT);
      dist = Distribution();
         t.addDeviceAndServiceTime(name.image,dist);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = ValidVirtualResName();
                                      t.addVirtualRes(name.image);
        break;
      case VIRTRES:
        res = VirtualResourceDef();
                                    t.addVirtualRes(res);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void VirtualResDetail(VirtualResource t) throws ParseException {
                                                Token name;     Distribution dist; VirtualResource res;Variable v;SchedulingPolicy pol;
    if (jj_2_5(2)) {
      name = ValidDeviceName();
      jj_consume_token(SERVT);
      dist = Distribution();
         t.addDeviceAndServiceTime(name.image,dist);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
        jj_consume_token(COUNT);
        v = Variable();
                                 t.setCount(v);
        break;
      case BUFFER:
        jj_consume_token(BUFFER);
        v = Variable();
                                 t.setBuffer(v);
        break;
      case SCHEDP:
        jj_consume_token(SCHEDP);
        pol = SchedPolicy();
                                      t.setSchedPolicy(pol);
        break;
      case IDENTIFIER:
        name = ValidVirtualResName();
                                     t.addVirtualRes(name.image);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public VirtualResource VirtualResourceDef() throws ParseException {
                                                Token name; VirtualResource res;
    jj_consume_token(VIRTRES);
    name = VirtualResName();
                                         res = new VirtualResource(name.image);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
      case BUFFER:
      case SCHEDP:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      VirtualResDetail(res);
    }
    jj_consume_token(END);
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public SoftServer ServerDef() throws ParseException {
                                SoftServer serv;        Token name;
    jj_consume_token(SERVER);
    name = ServerName();
                                   serv = new SoftServer(name.image);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THREAD:
      case TASK:
      case STATICSIZE:
      case REQUESTSIZE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
      ServerDetail(serv);
    }
    jj_consume_token(END);
         {if (true) return serv;}
    throw new Error("Missing return statement in function");
  }

  static final public void ServerDetail(SoftServer serv) throws ParseException {
                                      Token name;  Variable v; SchedulingPolicy pol;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATICSIZE:
      jj_consume_token(STATICSIZE);
      v = Variable();
                              serv.setStaticSize(v);
      break;
    case REQUESTSIZE:
      jj_consume_token(REQUESTSIZE);
      v = Variable();
                               serv.setRequestSize(v);
      break;
    case THREAD:
      jj_consume_token(THREAD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZE:
        jj_consume_token(SIZE);
        v = Variable();
                                         serv.setThreadSize(v);
        break;
      case COUNT:
        jj_consume_token(COUNT);
        v = Variable();
                                         serv.setThreadCount(v);
        break;
      case BUFFER:
        jj_consume_token(BUFFER);
        v = Variable();
                                                 serv.setThreadBuffer(v);
        break;
      case SCHEDP:
        jj_consume_token(SCHEDP);
        pol = SchedPolicy();
                                         serv.setSchedPolicy(pol);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case TASK:
      jj_consume_token(TASK);
      name = ValidTaskName();
        try{
         serv.addTask(ModelParameters.inputDistSys.getTask(name.image));
         ModelParameters.inputDistSys.getTask(name.image).addServer(serv.name);
        }catch(Error e)
        {
                {if (true) throw new Error("Line no "+name.beginLine+e.getMessage());}
        }
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Scenario ScenarioDef() throws ParseException {
                                Token scename; Variable v;      Scenario sce; Token t;
    t = jj_consume_token(SCENARIO);
    scename = ScenarioName();
                                             sce= new Scenario(scename.image);
    try {
      jj_consume_token(PROB);
      v = Variable();
                                     sce.setProbability(v);
      ScenarioDetails(sce);
      jj_consume_token(END);
    } catch (Error e) {
                        {if (true) throw new Error("Lineno:"+t.beginLine+" "+e.getMessage());}
    }
         {if (true) return sce;}
    throw new Error("Missing return statement in function");
  }

  static final public void ScenarioDetails(Scenario sce) throws ParseException {
                                        Node n2;
                Variable v = new Variable("local",1);
                Tree t = new Tree(v); Node n = new Node("root");
    label_14:
    while (true) {
      n = ArcDef(t,n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRANCH:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_15;
      }
      n2 = BranchDef(n);
                            t.addBranch(n,n2);
    }
         sce.rootNode = t.getRootNode();
         sce.initialize();
  }

  static final public Node ArcDef(Tree t, Node n) throws ParseException {
                             Token src,dest; Variable pktsize;boolean s;
    src = ValidTaskName();
    dest = ValidTaskName();
    pktsize = Variable();
    s = IsSync();
                String src_server = ModelParameters.inputDistSys.getTask(src.image).getServerName();
                String dest_server = ModelParameters.inputDistSys.getTask(dest.image).getServerName();
                {if (true) return t.addArc(n,src.image,src_server,dest.image,dest_server,pktsize,s);}
    throw new Error("Missing return statement in function");
  }

  static final public boolean IsSync() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNC:
      jj_consume_token(SYNC);
                {if (true) return true;}
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
         {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  static final public Node BranchDef(Node nin) throws ParseException {
                          Node n2;Variable v;
    jj_consume_token(BRANCH);
    jj_consume_token(PROB);
    v = Variable();
          Tree t = new Tree(v);
          Node n = new Node("branch");
    label_16:
    while (true) {
      n = ArcDef(t,n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_16;
      }
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRANCH:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_17;
      }
      n2 = BranchDef(n);
                       t.addBranch(n,n2);
    }
    jj_consume_token(END);
    {if (true) return t.getRootNode();}
    throw new Error("Missing return statement in function");
  }

  static final public void DeployDef() throws ParseException, Exception {
                                  Token name1,name2,n; DeployStmt dply;  String hname="";
    jj_consume_token(DEPLOY);
    if (jj_2_6(2)) {
      name1 = HostNameDef();
      name2 = jj_consume_token(IDENTIFIER);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name1 = jj_consume_token(IDENTIFIER);
        name2 = HostNameDef();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                try{
                         dply = new DeployStmt(name1.image,name2.image); dply.deploy();}
                catch(Error e)
                {{if (true) throw new Error("Wrong Deployment!  Line no:"+name1.beginLine+e.getMessage());}}
  }

  static final public void UnDeployDef() throws ParseException, Exception {
                                    Token name1,name2,n;UnDeployStmt dply;String hname="";
    jj_consume_token(UNDEPLOY);
    if (jj_2_7(2)) {
      name1 = HostNameDef();
      name2 = jj_consume_token(IDENTIFIER);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name1 = jj_consume_token(IDENTIFIER);
        name2 = HostNameDef();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                try{
                        dply = new UnDeployStmt(name1.image,name2.image); dply.undef();}
                catch(Error e)
                {{if (true) throw new Error("Wrong UnDeploy!  Line no:"+name1.beginLine+e.getMessage());}}
  }

  static final public Variable Variable() throws ParseException {
                     Token varname;Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      varname = ValidVariableName();
                Variable v = ModelParameters.inputDistSys.getVariable(varname.image);
                v.updateUsedInfo();
                {if (true) return v;}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                Variable var = new Variable("local",new Double(t.image));
                {if (true) return var;}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Distribution Distribution() throws ParseException {
                                Variable var;
         Distribution d = new Distribution();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case IDENTIFIER:
      var = Variable();
                                   d.addParam1(var);
      break;
    case EXP:
      jj_consume_token(EXP);
                         d.addName("exp");
      jj_consume_token(145);
      var = Variable();
                                   d.addParam1(var);
      jj_consume_token(146);
      break;
    case POI:
      jj_consume_token(POI);
                     d.addName("poi");
      jj_consume_token(145);
      var = Variable();
                                d.addParam1(var);
      jj_consume_token(146);
      break;
    case NOR:
      jj_consume_token(NOR);
                     d.addName("nor");
      jj_consume_token(145);
      var = Variable();
                               d.addParam1(var);
      jj_consume_token(147);
      var = Variable();
                               d.addParam2(var);
      jj_consume_token(146);
      break;
    case UNI:
      jj_consume_token(UNI);
      jj_consume_token(145);
      var = Variable();
                               d.addParam1(var);
      jj_consume_token(147);
      var = Variable();
                               d.addParam2(var);
      jj_consume_token(146);
      break;
    case BETA:
      jj_consume_token(BETA);
      jj_consume_token(145);
      var = Variable();
                               d.addParam1(var);
      jj_consume_token(147);
      var = Variable();
                               d.addParam2(var);
      jj_consume_token(146);
      break;
    case BINOM:
      jj_consume_token(BINOM);
      jj_consume_token(145);
      var = Variable();
                               d.addParam1(var);
      jj_consume_token(147);
      var = Variable();
                               d.addParam2(var);
      jj_consume_token(146);
      break;
    case CHISQR:
      jj_consume_token(CHISQR);
      jj_consume_token(145);
      var = Variable();
                               d.addParam1(var);
      jj_consume_token(146);
      break;
    case GAMMA:
      jj_consume_token(GAMMA);
      jj_consume_token(145);
      var = Variable();
                               d.addParam1(var);
      jj_consume_token(147);
      var = Variable();
                               d.addParam2(var);
      jj_consume_token(146);
      break;
    case CONST:
      jj_consume_token(CONST);
                      d.addName("const");
      jj_consume_token(145);
      var = Variable();
                               d.addParam1(var);
      jj_consume_token(146);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                d.calculateMean();
                {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public SchedulingPolicy SchedPolicy() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PS:
      jj_consume_token(PS);
               {if (true) return SchedulingPolicy.PS;}
      break;
    case LCFS:
      jj_consume_token(LCFS);
                 {if (true) return SchedulingPolicy.LCFS;}
      break;
    case FCFS:
      jj_consume_token(FCFS);
                {if (true) return SchedulingPolicy.FCFS;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//Validations: Checks if name is already defined
  static final public Token ServerName() throws ParseException {
                        Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isServer(t.image)==true)
                {if (true) throw new Error("Server "+t.image+" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token HostNameDef() throws ParseException {
                        Token t,n;String hostnme="";
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(143);
    n = jj_consume_token(NUMBER);
    jj_consume_token(144);
                t.image = t.image+"["+n.image+"]";
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token HostName() throws ParseException {
                        Token t,n;String hostnme="";
    t = jj_consume_token(IDENTIFIER);
                hostnme = t.image;
                if(ModelParameters.inputDistSys.isHost(hostnme)==true)
                {if (true) throw new Error("Host "+hostnme+" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token TaskName() throws ParseException {
                        Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isTask(t.image)==true)
                {if (true) throw new Error("Task \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token ScenarioName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isScenario(t.image)==true)
                {if (true) throw new Error("Scenario \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token DeviceName() throws ParseException {
                        Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isDevice(t.image)==true)
                {if (true) throw new Error("Device \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token VirtualResName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isVirtualRes(t.image)==true)
                        {if (true) throw new Error("Virtual Resource \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token VariableName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isVariable(t.image)==true)
                {if (true) throw new Error("Variable \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
             {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token LanName() throws ParseException {
                        Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isLan(t.image)==true)
                        {if (true) throw new Error("Lan \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

  static final public Token LinkName() throws ParseException {
                        Token t;
    t = jj_consume_token(IDENTIFIER);
                if(ModelParameters.inputDistSys.isLink(t.image)==true)
                        {if (true) throw new Error("Link \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");}
                else
                {if (true) return(t);}
    throw new Error("Missing return statement in function");
  }

//Validations: checks if the give name exists
  static final public Token ValidServerName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getServer(t.image); {if (true) return(t);}}
            catch (Error e)
                {{if (true) throw new Error("Undefined server \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}}
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidHostName() throws ParseException {
                                Token t,n;String hostnme="";
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(143);
    n = jj_consume_token(NUMBER);
    jj_consume_token(144);
                try{
                    hostnme = t.image+"["+n.image+"]";
                        ModelParameters.inputDistSys.getHost(hostnme);
                        t.image = hostnme;
                        {if (true) return(t);}
                }catch (Error e)
                {{if (true) throw new Error("Undefined host \u005c""+hostnme+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}}
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidTaskName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getTask(t.image); {if (true) return(t);}}
            catch (Error e)
                {{if (true) throw new Error("Undefined task \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}}
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidScenarioName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getScenario(t.image);{if (true) return(t);}}
            catch (Error e)
                {{if (true) throw new Error("Undefined scenario \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}}
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidDeviceName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getDevice(t.image);{if (true) return(t);}}
            catch (Error e)
                {{if (true) throw new Error("Undefined device \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}}
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidVirtualResName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getVirtualRes(t.image);{if (true) return(t);}}
            catch (Error e)
                {{if (true) throw new Error("Undefined Virtual Resource \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}}
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidVariableName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getVariable(t.image);{if (true) return(t);}}
                catch (Error e)
                {{if (true) throw new Error("Undefined variable \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}     }
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidLanName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getLan(t.image); {if (true) return(t);}}
                catch (Error e)
                {{if (true) throw new Error("Undefined Lan \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}  }
    throw new Error("Missing return statement in function");
  }

  static final public Token ValidLinkName() throws ParseException {
                                Token t;
    t = jj_consume_token(IDENTIFIER);
                try{ModelParameters.inputDistSys.getLink(t.image); {if (true) return(t);}}
                catch (Error e)
                {{if (true) throw new Error("Undefined Lan \u005c""+t.image+"\u005c" Line:"+t.beginLine+" Column:"+t.beginColumn );}  }
    throw new Error("Missing return statement in function");
  }

/******************************************************************/
  static final public PowerManagementGovernor PMGovernor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSERVATIVE:
      jj_consume_token(CONSERVATIVE);
                        {if (true) return PowerManagementGovernor.CONSERVATIVE;}
      break;
    case ONDEMAND:
      jj_consume_token(ONDEMAND);
                      {if (true) return PowerManagementGovernor.ONDEMAND;}
      break;
    case PERFORMANCE:
      jj_consume_token(PERFORMANCE);
                         {if (true) return PowerManagementGovernor.PERFORMANCE;}
      break;
    case POWERSAVE:
      jj_consume_token(POWERSAVE);
                       {if (true) return PowerManagementGovernor.POWERSAVE;}
      break;
    case USERSPACE:
      jj_consume_token(USERSPACE);
                       {if (true) return PowerManagementGovernor.USERSPACE;}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/******************************************************************/
  static final public Statement StatementDef() throws ParseException, Exception {
 SetStmt set;PrintStmt prn;ForStmt fstmt;ForEachStmt festmt;IfStmt ifstmt;WhileStmt wstmt;Expression exp;
         Statement stmt = new Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      set = SetStm();
                                  stmt.addSetStmt(set);
      break;
    case PRINT:
      prn = PrintStm();
                                  stmt.addPrintStmt(prn);
      break;
    case FOREACH:
      festmt = ForEachDef();
                                   stmt.addForEachStmt(festmt);
      break;
    case FOR:
      fstmt = ForDef();
                                  stmt.addForStmt(fstmt);
      break;
    case IF:
      ifstmt = IfStmt();
                                   stmt.addIfStmt(ifstmt);
      break;
    case WHILE:
      wstmt = WhileStmt();
                                     stmt.addWhileStmt(wstmt);
      break;
    case RESPT:
    case WAITT:
    case UTIL:
    case QLEN:
    case POWER:
    case EPERR:
    case PDP:
    case PEFF:
    case TPUT:
    case BPUT:
    case GPUT:
    case BUFFTIMEOUT:
    case DROPRATE:
    case AVGSERVT:
    case QPARMS:
    case BOTTLENECK:
    case BLOCKPROB:
    case PRINTCFG:
    case ARATE:
    case ANALYSE:
    case FREQ:
    case NUMBER:
    case IDENTIFIER:
    case 145:
    case 160:
      exp = Expression();
                                    stmt.addExpression(exp);
      break;
    case BREAK:
      jj_consume_token(BREAK);
                         stmt.addBreakStmt();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  static final public PrintArgument PrintArg() throws ParseException, Exception {
 Token t; Expression aexp;
     PrintArgument parg = new PrintArgument();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESPT:
    case WAITT:
    case UTIL:
    case QLEN:
    case POWER:
    case EPERR:
    case PDP:
    case PEFF:
    case TPUT:
    case BPUT:
    case GPUT:
    case BUFFTIMEOUT:
    case DROPRATE:
    case AVGSERVT:
    case QPARMS:
    case BOTTLENECK:
    case BLOCKPROB:
    case PRINTCFG:
    case ARATE:
    case ANALYSE:
    case FREQ:
    case NUMBER:
    case IDENTIFIER:
    case 145:
    case 160:
      aexp = Expression();
                                   parg.addExpression(aexp);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                     parg.addMessage(t.image);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return parg;}
    throw new Error("Missing return statement in function");
  }

  static final public PrintStmt PrintStm() throws ParseException, Exception {
 Token t; PrintArgument pa;
    t = jj_consume_token(PRINT);
                   PrintStmt prn = new PrintStmt(t.beginLine);
    pa = PrintArg();
                                 prn.addArgument(pa);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 148:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      jj_consume_token(148);
      pa = PrintArg();
                                 prn.addArgument(pa);
    }
         {if (true) return prn;}
    throw new Error("Missing return statement in function");
  }

  static final public SetStmt SetStm() throws ParseException {
        Token num,name1,name2;
        Distribution dist; SchedulingPolicy pol;
        Token t,t1,t2;
        Variable v;
    t = jj_consume_token(SET);
                 SetStmt set = new SetStmt(t.beginLine);
    if (jj_2_9(5)) {
      name1 = ValidHostName();
      jj_consume_token(149);
                                   set.addHost(name1.image);
      if (jj_2_8(3)) {
        name2 = ValidServerName();
        jj_consume_token(149);
        jj_consume_token(THREAD);
        jj_consume_token(149);
                                                    set.addServer(name2.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COUNT:
          jj_consume_token(COUNT);
          num = jj_consume_token(NUMBER);
                                       set.addCount(new Double(num.image));
          break;
        case BUFFER:
          jj_consume_token(BUFFER);
          num = jj_consume_token(NUMBER);
                                       set.addBuffer(new Double(num.image));
          break;
        case SCHEDP:
          jj_consume_token(SCHEDP);
          pol = SchedPolicy();
                                            set.addSchedulingPolicy(pol);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          name2 = ValidDeviceName();
          jj_consume_token(149);
                                        set.addDevice(name2.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COUNT:
            jj_consume_token(COUNT);
            num = jj_consume_token(NUMBER);
                                       set.addCount(new Double(num.image));
            break;
          case BUFFER:
            jj_consume_token(BUFFER);
            num = jj_consume_token(NUMBER);
                                       set.addBuffer(new Double(num.image));
            break;
          case SCHEDP:
            jj_consume_token(SCHEDP);
            pol = SchedPolicy();
                                            set.addSchedulingPolicy(pol);
            break;
          case PROBEINTERVAL:
            jj_consume_token(PROBEINTERVAL);
            v = Variable();
                                             set.addProbeInterval(v);
            break;
          case GOVERNOR_UP_THRESHOLD:
            jj_consume_token(GOVERNOR_UP_THRESHOLD);
            v = Variable();
                                                     set.addGovUpThreshold(v);
            break;
          case GOVERNOR_DOWN_THRESHOLD:
            jj_consume_token(GOVERNOR_DOWN_THRESHOLD);
            v = Variable();
                                                       set.addGovDownThreshold(v);
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else if (jj_2_10(5)) {
      name1 = ValidLanName();
      jj_consume_token(149);
                                 set.addLan(name1.image);
      name2 = ValidLanName();
      jj_consume_token(149);
                                 set.addLan(name2.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MTU:
        jj_consume_token(MTU);
        t1 = jj_consume_token(NUMBER);
        t2 = jj_consume_token(IDENTIFIER);
                                               set.addMTU(new Double(t1.image),t2.image);
        break;
      case PROP:
        jj_consume_token(PROP);
        t1 = jj_consume_token(NUMBER);
        t2 = jj_consume_token(IDENTIFIER);
                                                 set.addPropDelay(new Double(t1.image),t2.image);
        break;
      case TRANS:
        jj_consume_token(TRANS);
        t1 = jj_consume_token(NUMBER);
        t2 = jj_consume_token(IDENTIFIER);
                                                 set.addTransRate(new Double(t1.image),t2.image);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_11(5)) {
      name1 = ValidTaskName();
      jj_consume_token(149);
                                  set.addTask(name1.image);
      name2 = ValidDeviceName();
      jj_consume_token(149);
                                   set.addDevice(name2.image);
      jj_consume_token(SERVT);
      dist = Distribution();
                                     set.addServiceTime(dist);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name1 = ValidScenarioName();
        jj_consume_token(149);
        jj_consume_token(PROB);
        t = jj_consume_token(NUMBER);
        set.addScenario(name1.image);set.addProbability(new Double(t.image));
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDefinition FunctionDef() throws ParseException {
                                  Token name1;Token t;
         FunctionDefinition fdef = new FunctionDefinition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESPT:
    case WAITT:
    case UTIL:
    case QLEN:
    case POWER:
    case EPERR:
    case PDP:
    case PEFF:
    case TPUT:
    case BPUT:
    case GPUT:
    case BUFFTIMEOUT:
    case DROPRATE:
    case AVGSERVT:
    case QPARMS:
    case BLOCKPROB:
    case PRINTCFG:
    case ARATE:
    case FREQ:
      if (jj_2_13(5)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRINTCFG:
          t = jj_consume_token(PRINTCFG);
          jj_consume_token(150);
                             fdef.addFunction(t.image);
          break;
        case RESPT:
        case TPUT:
        case BPUT:
        case GPUT:
        case BUFFTIMEOUT:
        case DROPRATE:
        case BLOCKPROB:
        case ARATE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESPT:
            t = jj_consume_token(RESPT);
            break;
          case TPUT:
            t = jj_consume_token(TPUT);
            break;
          case BPUT:
            t = jj_consume_token(BPUT);
            break;
          case GPUT:
            t = jj_consume_token(GPUT);
            break;
          case BLOCKPROB:
            t = jj_consume_token(BLOCKPROB);
            break;
          case ARATE:
            t = jj_consume_token(ARATE);
            break;
          case BUFFTIMEOUT:
            t = jj_consume_token(BUFFTIMEOUT);
            break;
          case DROPRATE:
            t = jj_consume_token(DROPRATE);
            break;
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                                                            fdef.addFunction(t.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 150:
            jj_consume_token(150);
                   fdef.addScenario("eters");
            break;
          case 145:
            jj_consume_token(145);
            name1 = ValidScenarioName();
                                        fdef.addScenario(name1.image);
            jj_consume_token(146);
            break;
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 143:
            jj_consume_token(143);
            t = jj_consume_token(NUMBER);
                          fdef.addSlot(t.image);
            jj_consume_token(144);
            break;
          default:
            jj_la1[50] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESPT:
        case WAITT:
        case UTIL:
        case QLEN:
        case POWER:
        case EPERR:
        case PDP:
        case PEFF:
        case TPUT:
        case BPUT:
        case GPUT:
        case BUFFTIMEOUT:
        case DROPRATE:
        case AVGSERVT:
        case QPARMS:
        case BLOCKPROB:
        case ARATE:
        case FREQ:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESPT:
            t = jj_consume_token(RESPT);
            break;
          case TPUT:
            t = jj_consume_token(TPUT);
            break;
          case BPUT:
            t = jj_consume_token(BPUT);
            break;
          case GPUT:
            t = jj_consume_token(GPUT);
            break;
          case BLOCKPROB:
            t = jj_consume_token(BLOCKPROB);
            break;
          case ARATE:
            t = jj_consume_token(ARATE);
            break;
          case WAITT:
            t = jj_consume_token(WAITT);
            break;
          case UTIL:
            t = jj_consume_token(UTIL);
            break;
          case QLEN:
            t = jj_consume_token(QLEN);
            break;
          case AVGSERVT:
            t = jj_consume_token(AVGSERVT);
            break;
          case QPARMS:
            t = jj_consume_token(QPARMS);
            break;
          case BUFFTIMEOUT:
            t = jj_consume_token(BUFFTIMEOUT);
            break;
          case DROPRATE:
            t = jj_consume_token(DROPRATE);
            break;
          case POWER:
            t = jj_consume_token(POWER);
            break;
          case EPERR:
            t = jj_consume_token(EPERR);
            break;
          case PDP:
            t = jj_consume_token(PDP);
            break;
          case PEFF:
            t = jj_consume_token(PEFF);
            break;
          case FREQ:
            t = jj_consume_token(FREQ);
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                                                                                                                                                                      fdef.addFunction(t.image);
          jj_consume_token(145);
          if (jj_2_12(2)) {
            t = HostNameDef();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              t = jj_consume_token(IDENTIFIER);
              break;
            default:
              jj_la1[53] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
                                                                                 fdef.addTemp1(t.image);
          jj_consume_token(149);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            t = jj_consume_token(IDENTIFIER);
            break;
          case RAM:
            t = jj_consume_token(RAM);
            break;
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                fdef.addTemp2(t.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 146:
            jj_consume_token(146);
            break;
          case 149:
            jj_consume_token(149);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              t = jj_consume_token(IDENTIFIER);
              break;
            case RAM:
              t = jj_consume_token(RAM);
              break;
            default:
              jj_la1[55] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
                                                                                      fdef.addTemp3(t.image);
            jj_consume_token(146);
            break;
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 143:
            jj_consume_token(143);
            t = jj_consume_token(NUMBER);
                            fdef.addSlot(t.image);
            jj_consume_token(144);
            break;
          default:
            jj_la1[57] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case BOTTLENECK:
    case ANALYSE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANALYSE:
        t = jj_consume_token(ANALYSE);
        break;
      case BOTTLENECK:
        t = jj_consume_token(BOTTLENECK);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                            fdef.addFunction(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 150:
        jj_consume_token(150);
                      fdef.addNumber(-99.0);
        break;
      case 145:
        jj_consume_token(145);
        t = jj_consume_token(NUMBER);
                             fdef.addNumber(new Double(t.image));
        jj_consume_token(146);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     fdef.lineno=t.beginLine; {if (true) return fdef;}
    throw new Error("Missing return statement in function");
  }

  static final public ForEachStmt ForEachDef() throws ParseException, Exception {
                                          Token name;Statement stmt;Token t;ForEachStmt lstmt;int index=0;
    jj_consume_token(FOREACH);
                   lstmt = new ForEachStmt();
    name = ValidVariableName();
                                     lstmt.addVariable(name.image);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_19;
      }
      jj_consume_token(147);
      name = ValidVariableName();
                                         lstmt.addVariable(name.image);
    }
    jj_consume_token(IN);
    jj_consume_token(145);
    t = jj_consume_token(NUMBER);
                        lstmt.addVarValue(0,new Double(t.image));
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_20;
      }
      jj_consume_token(147);
      t = jj_consume_token(NUMBER);
                           lstmt.addVarValue(0,new Double(t.image));
    }
    jj_consume_token(146);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_21;
      }
      jj_consume_token(147);
                             index++;
      jj_consume_token(145);
      t = jj_consume_token(NUMBER);
                                     lstmt.addVarValue(index,new Double(t.image));
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 147:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_22;
        }
        jj_consume_token(147);
        t = jj_consume_token(NUMBER);
                                        lstmt.addVarValue(index,new Double(t.image));
      }
      jj_consume_token(146);
    }
    label_23:
    while (true) {
      stmt = StatementDef();
                             lstmt.addStatement(stmt);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESPT:
      case WAITT:
      case UTIL:
      case QLEN:
      case POWER:
      case EPERR:
      case PDP:
      case PEFF:
      case TPUT:
      case BPUT:
      case GPUT:
      case BUFFTIMEOUT:
      case DROPRATE:
      case AVGSERVT:
      case QPARMS:
      case BOTTLENECK:
      case BLOCKPROB:
      case PRINTCFG:
      case ARATE:
      case ANALYSE:
      case FREQ:
      case FOREACH:
      case FOR:
      case SET:
      case PRINT:
      case IF:
      case WHILE:
      case BREAK:
      case NUMBER:
      case IDENTIFIER:
      case 145:
      case 160:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_23;
      }
    }
    jj_consume_token(END);
         {if (true) return lstmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ForStmt ForDef() throws ParseException, Exception {
                                   ForStmt fstmt;Statement stmt;Token t,name;
    jj_consume_token(FOR);
               fstmt = new ForStmt();
    name = ValidVariableName();
                                     fstmt.addVariable(name.image);
    jj_consume_token(151);
    t = jj_consume_token(NUMBER);
                       fstmt.addStartVar(new Double(t.image));
    jj_consume_token(TO);
    t = jj_consume_token(NUMBER);
                       fstmt.addEndVar(new Double(t.image));
    jj_consume_token(INCR);
    t = jj_consume_token(NUMBER);
                               fstmt.addIncrVal(new Double(t.image));
    label_24:
    while (true) {
      stmt = StatementDef();
                             fstmt.addStatement(stmt);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESPT:
      case WAITT:
      case UTIL:
      case QLEN:
      case POWER:
      case EPERR:
      case PDP:
      case PEFF:
      case TPUT:
      case BPUT:
      case GPUT:
      case BUFFTIMEOUT:
      case DROPRATE:
      case AVGSERVT:
      case QPARMS:
      case BOTTLENECK:
      case BLOCKPROB:
      case PRINTCFG:
      case ARATE:
      case ANALYSE:
      case FREQ:
      case FOREACH:
      case FOR:
      case SET:
      case PRINT:
      case IF:
      case WHILE:
      case BREAK:
      case NUMBER:
      case IDENTIFIER:
      case 145:
      case 160:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_24;
      }
    }
    jj_consume_token(END);
          {if (true) return fstmt;}
    throw new Error("Missing return statement in function");
  }

  static final public IfStmt IfStmt() throws ParseException, Exception {
                                  Expression exp;Statement stmt;
         IfStmt ifstmt = new IfStmt();
    jj_consume_token(IF);
    jj_consume_token(145);
    exp = Expression();
                                  ifstmt.addExpression(exp);
    jj_consume_token(146);
    jj_consume_token(THEN);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESPT:
      case WAITT:
      case UTIL:
      case QLEN:
      case POWER:
      case EPERR:
      case PDP:
      case PEFF:
      case TPUT:
      case BPUT:
      case GPUT:
      case BUFFTIMEOUT:
      case DROPRATE:
      case AVGSERVT:
      case QPARMS:
      case BOTTLENECK:
      case BLOCKPROB:
      case PRINTCFG:
      case ARATE:
      case ANALYSE:
      case FREQ:
      case FOREACH:
      case FOR:
      case SET:
      case PRINT:
      case IF:
      case WHILE:
      case BREAK:
      case NUMBER:
      case IDENTIFIER:
      case 145:
      case 160:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_25;
      }
      stmt = StatementDef();
                                      ifstmt.addStatement(stmt);
    }
    if (jj_2_14(2)) {
      jj_consume_token(ELSE);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESPT:
        case WAITT:
        case UTIL:
        case QLEN:
        case POWER:
        case EPERR:
        case PDP:
        case PEFF:
        case TPUT:
        case BPUT:
        case GPUT:
        case BUFFTIMEOUT:
        case DROPRATE:
        case AVGSERVT:
        case QPARMS:
        case BOTTLENECK:
        case BLOCKPROB:
        case PRINTCFG:
        case ARATE:
        case ANALYSE:
        case FREQ:
        case FOREACH:
        case FOR:
        case SET:
        case PRINT:
        case IF:
        case WHILE:
        case BREAK:
        case NUMBER:
        case IDENTIFIER:
        case 145:
        case 160:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_26;
        }
        stmt = StatementDef();
                                              ifstmt.addElseStatement(stmt);
      }
    } else {
      ;
    }
    jj_consume_token(END);
         {if (true) return ifstmt;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStmt WhileStmt() throws ParseException, Exception {
                                        Expression exp;Statement stmt;
         WhileStmt wstmt = new WhileStmt();
    jj_consume_token(WHILE);
    jj_consume_token(145);
    exp = Expression();
                                  wstmt.addExpression(exp);
    jj_consume_token(146);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESPT:
      case WAITT:
      case UTIL:
      case QLEN:
      case POWER:
      case EPERR:
      case PDP:
      case PEFF:
      case TPUT:
      case BPUT:
      case GPUT:
      case BUFFTIMEOUT:
      case DROPRATE:
      case AVGSERVT:
      case QPARMS:
      case BOTTLENECK:
      case BLOCKPROB:
      case PRINTCFG:
      case ARATE:
      case ANALYSE:
      case FREQ:
      case FOREACH:
      case FOR:
      case SET:
      case PRINT:
      case IF:
      case WHILE:
      case BREAK:
      case NUMBER:
      case IDENTIFIER:
      case 145:
      case 160:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_27;
      }
      stmt = StatementDef();
                                      wstmt.addStatement(stmt);
    }
    jj_consume_token(END);
         {if (true) return wstmt;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException, Exception {
 Token name; Expression a;LogicalExpression lexp;
         Expression aexp = new Expression();
    if (jj_2_15(2147483647)) {
      name = ValidVariableName();
                                          Variable v=ModelParameters.inputDistSys.getVariable(name.image);
                                  aexp.addVariable(v);
      jj_consume_token(151);
      a = Expression();
                                aexp.addExpression(a);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESPT:
      case WAITT:
      case UTIL:
      case QLEN:
      case POWER:
      case EPERR:
      case PDP:
      case PEFF:
      case TPUT:
      case BPUT:
      case GPUT:
      case BUFFTIMEOUT:
      case DROPRATE:
      case AVGSERVT:
      case QPARMS:
      case BOTTLENECK:
      case BLOCKPROB:
      case PRINTCFG:
      case ARATE:
      case ANALYSE:
      case FREQ:
      case NUMBER:
      case IDENTIFIER:
      case 145:
      case 160:
        lexp = LogicalExpression();
                                          aexp.addLogicalExpression(lexp);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return aexp;}
    throw new Error("Missing return statement in function");
  }

  static final public LogicalExpression LogicalExpression() throws ParseException, Exception {
                                                         LogicalANDExpression land; LogicalExpression l;
         LogicalExpression lexp = new LogicalExpression();
    land = LogicalANDExpression();
                                        lexp.addLogicalANDExpression(land);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 152:
      jj_consume_token(152);
                    lexp.addOperation("||");
      l = LogicalExpression();
                                     lexp.addLogicalExpression(l);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
         {if (true) return lexp;}
    throw new Error("Missing return statement in function");
  }

  static final public LogicalANDExpression LogicalANDExpression() throws ParseException, Exception {
                                                               EqualityExpression eexp; LogicalANDExpression l;
         LogicalANDExpression lexp = new LogicalANDExpression();
    eexp = EqualityExpression();
                                     lexp.addEqualityExpression(eexp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 153:
      jj_consume_token(153);
                  lexp.addOperation("&&");
      l = LogicalANDExpression();
                                       lexp.addLogicalANDExpression(l);
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
         {if (true) return lexp;}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityExpression EqualityExpression() throws ParseException, Exception {
                                                           RelationalExpression rex;EqualityExpression e;
         EqualityExpression eex = new EqualityExpression();
    rex = RelationalExpression();
                                            eex.addRelationalExpression(rex);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 154:
    case 155:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 154:
        jj_consume_token(154);
                          eex.addOperation("==");
        break;
      case 155:
        jj_consume_token(155);
                           eex.addOperation("!=");
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e = EqualityExpression();
                                           eex.addEqualityExpression(e);
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
         {if (true) return eex;}
    throw new Error("Missing return statement in function");
  }

  static final public RelationalExpression RelationalExpression() throws ParseException, Exception {
                                                               AdditiveExpression a;RelationalExpression r;
         RelationalExpression rex = new RelationalExpression();
    a = AdditiveExpression();
                                        rex.addAdditiveExpression(a);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 156:
    case 157:
    case 158:
    case 159:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 156:
        jj_consume_token(156);
                               rex.addOperation("<");
        break;
      case 157:
        jj_consume_token(157);
                               rex.addOperation(">");
        break;
      case 158:
        jj_consume_token(158);
                                rex.addOperation("<=");
        break;
      case 159:
        jj_consume_token(159);
                                rex.addOperation(">=");
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      r = RelationalExpression();
                                                  rex.addRelationalExpression(r);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
         {if (true) return rex;}
    throw new Error("Missing return statement in function");
  }

  static final public AdditiveExpression AdditiveExpression() throws ParseException, Exception {
                                                          MultiplicativeExpression mex;AdditiveExpression a;
         AdditiveExpression aex = new AdditiveExpression();
    mex = MultiplicativeExpression();
                                              aex.addMultiplicativeExpression(mex);
    if (jj_2_16(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 160:
        jj_consume_token(160);
                                aex.addOperation("-");
        break;
      case 148:
        jj_consume_token(148);
                                         aex.addOperation("+");
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      a = AdditiveExpression();
                                        aex.addAdditiveExpression(a);
    } else {
      ;
    }
     {if (true) return aex;}
    throw new Error("Missing return statement in function");
  }

  static final public MultiplicativeExpression MultiplicativeExpression() throws ParseException, Exception {
                                                                     UnaryExpression uex;MultiplicativeExpression m;
         MultiplicativeExpression mex = new MultiplicativeExpression();
    uex = UnaryExpression();
                                      mex.addUnaryExpression(uex);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 161:
    case 162:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 161:
        jj_consume_token(161);
                             mex.addOperation("*");
        break;
      case 162:
        jj_consume_token(162);
                                 mex.addOperation("/");
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      m = MultiplicativeExpression();
                                              mex.addMultiplicativeExpression(m);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
      {if (true) return mex;}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryExpression UnaryExpression() throws ParseException, Exception {
                                                    PrimaryExpression pex;
         UnaryExpression uex = new UnaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 160:
      jj_consume_token(160);
      pex = PrimaryExpression();
                                      uex.addPrimaryExpression(pex); uex.addNegate();
      break;
    case RESPT:
    case WAITT:
    case UTIL:
    case QLEN:
    case POWER:
    case EPERR:
    case PDP:
    case PEFF:
    case TPUT:
    case BPUT:
    case GPUT:
    case BUFFTIMEOUT:
    case DROPRATE:
    case AVGSERVT:
    case QPARMS:
    case BOTTLENECK:
    case BLOCKPROB:
    case PRINTCFG:
    case ARATE:
    case ANALYSE:
    case FREQ:
    case NUMBER:
    case IDENTIFIER:
    case 145:
      pex = PrimaryExpression();
                                              uex.addPrimaryExpression(pex);
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return uex;}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException, Exception {
 Token name;FunctionDefinition func;Token t;Expression a;
         PrimaryExpression pex = new PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = ValidVariableName();
                        Variable v= ModelParameters.inputDistSys.getVariable(name.image);
                        pex.addVariable(v);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                              pex.addNumber(new Double(t.image));
      break;
    default:
      jj_la1[82] = jj_gen;
      if (jj_2_17(3)) {
        func = FunctionDef();
                                    pex.addFuncDef(func);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 145:
          jj_consume_token(145);
          a = Expression();
          jj_consume_token(146);
                                              pex.addExpression(a);
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
         {if (true) return pex;}
    throw new Error("Missing return statement in function");
  }

  static final public void ModelParamDef() throws ParseException {
                         Variable var;  Token t;boolean res; Distribution dis;
    jj_consume_token(MODELPARAMS);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WARNINGS:
      case RESPT:
      case UTIL:
      case QLEN:
      case TPUT:
      case TYPE:
      case METHOD:
      case NOOFREQUESTS:
      case SIMENDTIME:
      case CONFINT:
      case REPLICATIONNO:
      case STARTUPSAMPLENO:
      case OUTPUT:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        jj_consume_token(TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN:
          t = jj_consume_token(OPEN);
          break;
        case CLOSED:
          t = jj_consume_token(CLOSED);
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if(t.image.compareToIgnoreCase("open")==0)
                {ModelParameters.setSystemType(SysType.OPEN);}
         else {ModelParameters.setSystemType(SysType.CLOSED);}
        break;
      case METHOD:
        jj_consume_token(METHOD);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANALYTICAL:
          t = jj_consume_token(ANALYTICAL);
          break;
        case SIMULATION:
          t = jj_consume_token(SIMULATION);
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if(t.image.compareToIgnoreCase("analytical")==0)
                {ModelParameters.setSolutionMethod(SolutionMethod.ANALYTICAL);
//   		logger.info("Method:Analytical");
                }
         else {ModelParameters.setSolutionMethod(SolutionMethod.SIMULATION);
//   	 	   logger.info("Method:Simulation");
              }
        break;
      case WARNINGS:
        jj_consume_token(WARNINGS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENABLE:
          t = jj_consume_token(ENABLE);
          break;
        case DISABLE:
          t = jj_consume_token(DISABLE);
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
         if(t.image.compareToIgnoreCase("enable")==0)
                {ModelParameters.setWarnings(Warnings.ENABLE);
//   		logger.info("Warnings:enable");
                }
         else {ModelParameters.setWarnings(Warnings.DISABLE);
//   	 	   logger.info("Warnings:disable");
              }
        break;
      case NOOFREQUESTS:
        jj_consume_token(NOOFREQUESTS);
        t = jj_consume_token(NUMBER);
                                            ModelParameters.addNoOfRequests(new Double(t.image));
        break;
      case SIMENDTIME:
        jj_consume_token(SIMENDTIME);
        var = Variable();
                                                  ModelParameters.addSimulationEndTime(var);
        break;
      case CONFINT:
        jj_consume_token(CONFINT);
        res = IsBool();
                                                      ModelParameters.setConfIntervalsEnabled(res);
        break;
      case REPLICATIONNO:
        jj_consume_token(REPLICATIONNO);
        t = jj_consume_token(NUMBER);
                                            ModelParameters.addNoOfReplications(new Double(t.image));
        break;
      case STARTUPSAMPLENO:
        jj_consume_token(STARTUPSAMPLENO);
        t = jj_consume_token(NUMBER);
                                           ModelParameters.addStartUpSampleNo(new Double(t.image));
        break;
      case QLEN:
        jj_consume_token(QLEN);
        t = jj_consume_token(NUMBER);
                                                   ModelParameters.addQlencilevel(new Double(t.image));
        break;
      case TPUT:
        jj_consume_token(TPUT);
        t = jj_consume_token(NUMBER);
                                                   ModelParameters.addTputcilevel(new Double(t.image));
        break;
      case UTIL:
        jj_consume_token(UTIL);
        t = jj_consume_token(NUMBER);
                                                   ModelParameters.addUtilcilevel(new Double(t.image));
        break;
      case RESPT:
        jj_consume_token(RESPT);
        t = jj_consume_token(NUMBER);
                                                   ModelParameters.addResptcilevel(new Double(t.image));
        break;
      case OUTPUT:
        jj_consume_token(OUTPUT);
        t = jj_consume_token(FILENAME);
                                         ModelParameters.addOutputFile(t.image);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END);
  }

//Workload type parsing added by yogesh
  static final public void ModelWorkLoad() throws ParseException {
                         Variable var; Token t;
    jj_consume_token(WORKLOAD);
    t = jj_consume_token(CYCLIC);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARATE:
      case INTERVAL:
      case NOOFUSERS:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_29;
      }
      WorkloadDetails();
    }
    jj_consume_token(END);
  }

  static final public void WorkloadDetails() throws ParseException {
                         Variable var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARATE:
      jj_consume_token(ARATE);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[90] = jj_gen;
          break label_30;
        }
        var = Variable();
                                  ModelParameters.addArrivalRates(var);
      }
      jj_consume_token(END);
      break;
    case NOOFUSERS:
      jj_consume_token(NOOFUSERS);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[91] = jj_gen;
          break label_31;
        }
        var = Variable();
                                          ModelParameters.addNumberOfUsers(var);
      }
      jj_consume_token(END);
      break;
    case INTERVAL:
      jj_consume_token(INTERVAL);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_32;
        }
        var = Variable();
                                         ModelParameters.addIntervalSlots(var);
      }
      jj_consume_token(END);
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LoadParamDef() throws ParseException {
                        Variable var;   Token t;boolean res; Distribution dis;
    jj_consume_token(LOADPARAMS);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARATE:
      case THINKTIME:
      case TIMEOUT:
      case RETRYPROB:
      case NOOFUSERS:
      case MAXRETRY:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THINKTIME:
        jj_consume_token(THINKTIME);
        dis = Distribution();
                                           ModelParameters.addThinkTime(dis);
        break;
      case TIMEOUT:
        jj_consume_token(TIMEOUT);
        dis = Distribution();
                                         ModelParameters.addTimeout(dis);
        break;
      case RETRYPROB:
        jj_consume_token(RETRYPROB);
        var = Variable();
                                           ModelParameters.addRetryProbability(var);
        break;
      case ARATE:
        jj_consume_token(ARATE);
        var = Variable();
                                                 ModelParameters.addArrivalRate(var);
        break;
      case NOOFUSERS:
        jj_consume_token(NOOFUSERS);
        var = Variable();
                                                    ModelParameters.addNoOfUsers(var);
        break;
      case MAXRETRY:
        jj_consume_token(MAXRETRY);
        var = Variable();
                                              ModelParameters.addMaxRetry(var);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ModelParameters.isModified=true;
    jj_consume_token(END);
  }

  static final public boolean IsBool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                {if (true) return true;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                 {if (true) return false;}
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_3_8() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(149)) return true;
    if (jj_scan_token(THREAD)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(149)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_49()) return true;
    if (jj_scan_token(151)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(LAN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(143)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(DEVICE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(145)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(FOREACH)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(SERVT)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(145)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(150)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(SERVT)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(160)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(148)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(160)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(143)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(144)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(145)) return true;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(145)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(146)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(150)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(143)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(144)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(PRINTCFG)) return true;
    if (jj_scan_token(150)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(149)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(149)) return true;
    if (jj_scan_token(SERVT)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(TRANS)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(PROP)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(MTU)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(149)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(149)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PerfParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[97];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x283c680,0x283c680,0x0,0x400,0x0,0x200,0x0,0x0,0x0,0x800,0x0,0x0,0x40000000,0x0,0x0,0xd040000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x5040000,0x5040000,0x80c00000,0x5040000,0x80c00000,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x3800,0x0,0x0,0x0,0x0,0x5040000,0x5040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x180400,0x180400,0x0,0x0,0x0,0x0,0x0,0x80000,0xe00000,0xe000000,0xf0000000,0xe00000,0x0,0x4000,0x10,0x68008,0x0,0x69800,0x0,0x0,0x0,0x69800,0x0,0x0,0x0,0x0,0x1,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e0,0x0,0x0,0x0,0x0,0x68000,0x0,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xbffffc00,0xbffffc00,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fe,0x0,0x0,0xbffffc00,0xbffffc00,0x0,0x0,0x0,0x0,0x1,0x0,0x147c0400,0x0,0x0,0x1c7c0400,0x95fffc00,0x0,0x0,0x0,0x0,0x0,0x95fffc00,0x22000000,0x0,0xbffffc00,0x0,0x0,0x0,0x0,0xbffffc00,0xbffffc00,0xbffffc00,0xbffffc00,0xbffffc00,0xbffffc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbffffc00,0x0,0x0,0x43400,0x0,0x0,0x0,0x43400,0x50000000,0x0,0x0,0x0,0x50000000,0x10000000,0x10000000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x1b263,0x1b263,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x3263,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3263,0x3263,0x3263,0x3263,0x3263,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf9800000,0x2400000,0x60000,0x0,0xf9800000,0x4000000,0x0,0x0,0x0,0x4000000,0x4380000,0x4380000,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x20920,0x20920,0x800,0x0,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x800,0x0,0x900,0x900,0x900,0x0,0x800,0x800,0x800,0x800,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x800,0x800,0x900,0x900,0x0,0x0,0x20900,0x20b00,0x100000,0x0,0x0,0x800,0x0,0x800,0x0,0x420000,0x8000,0x0,0x0,0x800,0x800,0x800,0x240000,0x8000,0x0,0x0,0x420000,0x0,0x80000,0x80000,0x80000,0x80000,0x20900,0x20900,0x20900,0x20900,0x20900,0x20900,0x1000000,0x2000000,0xc000000,0xc000000,0xf0000000,0xf0000000,0x100000,0x0,0x0,0x20900,0x900,0x20000,0x1,0x0,0x0,0xc,0x1,0x0,0x900,0x900,0x900,0x0,0x10,0x10,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x6,0x6,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[17];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PerfParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PerfParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PerfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PerfParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PerfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PerfParser(PerfParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PerfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[163];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 97; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 163; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

   //End of main
}
