/* Generated By:JavaCC: Do not edit this line. PerfParserTokenManager.java */
package perfcenter.parser;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.*;
import perfcenter.baseclass.*;
import perfcenter.baseclass.enums.*;
import perfcenter.baseclass.exception.*;

/** Token Manager. */
public class PerfParserTokenManager implements PerfParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x400000000L) != 0L)
            return 21;
         if ((active0 & 0xffffffffffffff80L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffL) != 0L)
         {
            jjmatchedKind = 139;
            return 42;
         }
         return -1;
      case 1:
         if ((active0 & 0xe00020000000800L) != 0L || (active1 & 0x28c40000000L) != 0L)
            return 42;
         if ((active0 & 0xf1fffdfffffff780L) != 0L || (active1 & 0xfffffd73bfffffffL) != 0L || (active2 & 0xffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x2008400040000100L) != 0L || (active1 & 0x1230001001fL) != 0L)
            return 42;
         if ((active0 & 0xd1f7bfffbffff680L) != 0L || (active1 & 0xfffffc58fffeffe0L) != 0L || (active2 & 0xffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 2;
            }
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0xd031800210993000L) != 0L || (active1 & 0xc00c18801e3020L) != 0L)
            return 42;
         if ((active0 & 0x1c67ffdaf66c680L) != 0L || (active1 & 0xff3ff0417fe0cfc0L) != 0L || (active2 & 0xffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 3;
            }
            return 42;
         }
         return -1;
      case 4:
         if ((active0 & 0x140150820240000L) != 0L || (active1 & 0x30401800cf40L) != 0L || (active2 & 0x80L) != 0L)
            return 42;
         if ((active0 & 0x87eaf58f42c680L) != 0L || (active1 & 0xff3fc00167e00080L) != 0L || (active2 & 0x7fL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return 42;
         }
         return -1;
      case 5:
         if ((active0 & 0x5424400L) != 0L || (active1 & 0x300400001000080L) != 0L || (active2 & 0x45L) != 0L)
            return 42;
         if ((active0 & 0x87fffd8a008280L) != 0L || (active1 & 0xfc3f80016ee00000L) != 0L || (active2 & 0xbaL) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
            return 42;
         }
         return -1;
      case 6:
         if ((active0 & 0xa000000L) != 0L || (active1 & 0x2010000120000000L) != 0L || (active2 & 0x8L) != 0L)
            return 42;
         if ((active0 & 0x87fffd80008280L) != 0L || (active1 & 0xdc2f80004ee00000L) != 0L || (active2 & 0xb2L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
            return 42;
         }
         return -1;
      case 7:
         if ((active0 & 0x6005400008280L) != 0L || (active1 & 0x48c00000L) != 0L || (active2 & 0xb0L) != 0L)
            return 42;
         if ((active0 & 0x81ffa980000000L) != 0L || (active1 & 0xdc2f800006200000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 7;
            }
            return 42;
         }
         return -1;
      case 8:
         if ((active0 & 0x230000000000L) != 0L || (active1 & 0x428000004000000L) != 0L)
            return 42;
         if ((active0 & 0x87dca980000000L) != 0L || (active1 & 0xd807800002200000L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0x80000080000000L) != 0L || (active1 & 0x1007000002000000L) != 0L)
            return 42;
         if ((active0 & 0x7dca900000000L) != 0L || (active1 & 0xc800800000200000L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 9;
            return 42;
         }
         return -1;
      case 10:
         if ((active0 & 0x7dc2800000000L) != 0L || (active1 & 0xc800000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 10;
            return 42;
         }
         if ((active0 & 0x8100000000L) != 0L || (active1 & 0x800000200000L) != 0L)
            return 42;
         return -1;
      case 11:
         if ((active0 & 0x82000000000L) != 0L || (active1 & 0x800000000000000L) != 0L)
            return 42;
         if ((active0 & 0x7d40800000000L) != 0L || (active1 & 0xc000000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 11;
            return 42;
         }
         return -1;
      case 12:
         if ((active0 & 0x7d40000000000L) != 0L || (active1 & 0x8000000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 12;
            return 42;
         }
         if ((active0 & 0x800000000L) != 0L || (active1 & 0x4000000000000000L) != 0L)
            return 42;
         return -1;
      case 13:
         if ((active0 & 0x1900000000000L) != 0L)
            return 42;
         if ((active0 & 0x6440000000000L) != 0L || (active1 & 0x8000000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 13;
            }
            return 42;
         }
         return -1;
      case 14:
         if ((active0 & 0x7400000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 14;
            return 42;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x8000000000000000L) != 0L)
            return 42;
         return -1;
      case 15:
         if ((active2 & 0x2L) != 0L)
            return 42;
         if ((active0 & 0x7400000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 15;
            return 42;
         }
         return -1;
      case 16:
         if ((active0 & 0x7400000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 16;
            return 42;
         }
         return -1;
      case 17:
         if ((active0 & 0x7400000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 17;
            return 42;
         }
         return -1;
      case 18:
         if ((active0 & 0x7400000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 18;
            return 42;
         }
         return -1;
      case 19:
         if ((active0 & 0x400000000000L) != 0L)
            return 42;
         if ((active0 & 0x7000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 19;
            return 42;
         }
         return -1;
      case 20:
         if ((active0 & 0x2000000000000L) != 0L)
            return 42;
         if ((active0 & 0x5000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 20;
            return 42;
         }
         return -1;
      case 21:
         if ((active0 & 0x5000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 21;
            return 42;
         }
         return -1;
      case 22:
         if ((active0 & 0x4000000000000L) != 0L)
            return 42;
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 22;
            return 42;
         }
         return -1;
      case 23:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 23;
            return 42;
         }
         return -1;
      case 24:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 24;
            return 42;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 40:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 41:
         return jjStopAtPos(0, 146);
      case 42:
         return jjStopAtPos(0, 161);
      case 43:
         return jjStopAtPos(0, 148);
      case 44:
         return jjStopAtPos(0, 147);
      case 45:
         return jjStopAtPos(0, 160);
      case 47:
         return jjStartNfaWithStates_0(0, 162, 21);
      case 58:
         return jjStopAtPos(0, 149);
      case 60:
         jjmatchedKind = 156;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 61:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 62:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000L);
      case 91:
         return jjStopAtPos(0, 143);
      case 93:
         return jjStopAtPos(0, 144);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2010030800000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2100000001000000L, 0x600006280060L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000040000L, 0x2200000000000280L, 0xc2L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4400L, 0x1000400000L, 0x8L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x80000008002L, 0x4L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20001000L, 0x380000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8006001000000000L, 0x100100L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x80000000010000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x28840000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x18000000002000L, 0x1000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4200000000000000L, 0x100800000000001L, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0xc00000000000004L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x40000000000000L, 0x1L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x21958800080800L, 0x4008034008L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1002000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x140000000L, 0x4020000000000400L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x48028c320080L, 0x9004002000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000010c00000L, 0x98040400040000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400020000008000L, 0x1010L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000200L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x100000000800L, 0x20L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 41:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 61:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000460800200L, active1, 0x900L, active2, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0xd000000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4003080L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x10000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80408100224400L, active1, 0x4120003000020420L, active2, 0L);
      case 70:
      case 102:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 105, 42);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0x8140000000080L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000202000000L, active1, 0x1014000000000040L, active2, 0x8L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200080004002000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000008100L, active1, 0x2010860000010L, active2, 0x4L);
      case 79:
      case 111:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 98, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x6153800050000L, active1, 0x2c0180030200420cL, active2, 0xa2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000080008000000L, active1, 0x400000011c8000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x61800010080000L, active1, 0x604098400000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 42);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 42);
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x8000000000001001L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0x200000L, active2, 0x1L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000100000L, active1, 0x80000000000000L, active2, 0x40L);
      case 124:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000080000000L, active1, 0x8003400031000000L, active2, 0x4L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1800000000L, active2, 0x40L);
      case 68:
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 42);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000008000L, active1, 0x800000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0008000080L, active1, 0x4024008000a000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1003000L, active1, 0x220000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 42);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8104008001880L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200020000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1014000000000100L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x10002000100000L, active1, 0x2000000000000240L, active2, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x21800000080000L, active1, 0xe00000004400000L, active2, 0x2L);
      case 80:
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 42);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0xd000000000004000L, active1, 0x4080000000000000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 42);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8402620200L, active1, 0x100000000L, active2, 0x20L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x810000L, active1, 0x80000000400L, active2, 0x8L);
      case 84:
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000000L, active1, 0x120000042000020L, active2, 0x1L);
      case 85:
      case 117:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000L, active1, 0x1c0000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x6001000000400L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x150800000000L, active1, 0x4000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0x8L);
      case 66:
      case 98:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0L, active2, 0x4L);
      case 67:
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x1000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 42);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 42);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 42);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x1063d580c408000L, active1, 0x1010800140004000L, active2, 0L);
      case 70:
      case 102:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x8001000000L, active1, 0x2c00000000200000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x600L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 42);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 76:
      case 108:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x4002100020000000L, active2, 0x42L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 42);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 42);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000400040080L, active1, 0x8404008000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400400L, active2, 0x1L);
      case 81:
      case 113:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 42);
         break;
      case 82:
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 42);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x8020000001008000L, active2, 0x10L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 42);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 42);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 42);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 42);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x402020000000L, active1, 0x200000000800280L, active2, 0x80L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 42);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 42);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 42);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x82000000L, active1, 0x12000800L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x4000000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x220000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x400280L, active1, 0x100000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0x400000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000c000000L, active1, 0L, active2, 0x2L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 42);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 42);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x81802101020000L, active1, 0x200000000800000L, active2, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x480000000L, active1, 0x6000000000000000L, active2, 0x40L);
      case 75:
      case 107:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000004000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4800002000000L, active2, 0x24L);
      case 77:
      case 109:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x1000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000004000L, active1, 0x110000000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000008000L, active1, 0x1000000000000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x6151802000000L, active1, 0x800000040400000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 42);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 42);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 42);
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 42);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 42);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000008200000L, active2, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0x1L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x22000020000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x1980800000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x5000000400000L, active2, 0x80L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 134, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x4000000108000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 42);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 120, 42);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 42);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x400002000000L, active1, 0x800000002000000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 42);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L, active2, 0x8L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x6001400000000L, active1, 0x2000000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L, active2, 0x22L);
      case 80:
      case 112:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x20800004000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 42);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 42);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000a000000080L, active1, 0x800000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x10100000000L, active1, 0x400000020000000L, active2, 0L);
      case 84:
      case 116:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xa000000000000L, active2, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x8010000000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x70000000000L, active1, 0x4000800040000000L, active2, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 42);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x400000000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 42);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000080L, active1, 0xa000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000200L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x8800000000L, active1, 0x200000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x2000000L, active2, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x6001000008000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x21000004000000L, active2, 0x10L);
      case 83:
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000080000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 42);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x1004000000400000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x800000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0xa800000000L, active1, 0x1000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x2000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 42);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 133, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 42);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x280000000000L, active1, 0x2200000L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 42);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000080000000L, active1, 0x1004000000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 42);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1840000000000L, active1, 0L, active2, 0x2L);
      case 79:
      case 111:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0x20000004000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000000L, active1, 0x400800000000000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0x8000000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 42);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 135, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 42);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 132, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x6400000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0x8002800000000000L, active2, 0L);
      case 66:
      case 98:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 90, 42);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 117, 42);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 42);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 42);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 115, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0x4000000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1001000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x108800000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000200000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 42);
         break;
      case 83:
      case 115:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1802000000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000080000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L, active2, 0x2L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 42);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 55, 42);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 124, 42);
         return jjMoveStringLiteralDfa10_0(active0, 0x1880000000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 89, 42);
         break;
      case 76:
      case 108:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 113, 42);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000800000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 114, 42);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 112, 42);
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0x800000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0x200000L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 42);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 42);
         return jjMoveStringLiteralDfa11_0(active0, 0x440000000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1800000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 111, 42);
         break;
      case 84:
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 85, 42);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 37, 42);
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x140000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 43, 42);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 123, 42);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0x1c00000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x1800000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 42);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x540000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 126, 42);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 44, 42);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x1400000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000L, active1, 0x8000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x1400000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 79:
      case 111:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 127, 42);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 42, 42);
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, active2);
      return 15;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L, active2, 0L);
      case 79:
      case 111:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(15, 129, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000000L);
      case 88:
      case 120:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 46, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 49, 42);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x1000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000L);
      case 68:
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 50, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 48, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(13, 14);
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 8);
                  }
                  else if (curChar == 47)
                     jjAddStates(9, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if (curChar == 47)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 47)
                     jjCheckNAdd(14);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 5:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 6:
                  if (curChar == 34 && kind > 137)
                     kind = 137;
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 9:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if (curChar == 10)
                     jjCheckNAddStates(11, 13);
                  break;
               case 12:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 47)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if (curChar == 47)
                     jjAddStates(9, 10);
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 24:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 42)
                     jjCheckNAddStates(18, 20);
                  break;
               case 29:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 30:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 31:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(3, 8);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 46 && kind > 136)
                     kind = 136;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAddStates(25, 29);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(33);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(30, 33);
                  break;
               case 5:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  jjAddStates(0, 2);
                  break;
               case 27:
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  jjCheckNAddTwoStates(30, 28);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 13);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 25, 35, 36, 37, 39, 40, 41, 21, 26, 3, 4, 6, 3, 4, 
   8, 6, 28, 29, 31, 15, 16, 17, 18, 15, 16, 17, 18, 33, 5, 7, 
   9, 12, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\133", "\135", "\50", "\51", "\54", "\53", "\72", "\50\51", 
"\75", "\174\174", "\46\46", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", 
"\55", "\52", "\57", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0x7ffff9fffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[42];
static private final int[] jjstateSet = new int[84];
static protected char curChar;
/** Constructor. */
public PerfParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PerfParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
