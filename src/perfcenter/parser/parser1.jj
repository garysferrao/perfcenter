/* @author  akhila modified by rakesh, nikhil, yogesh
 */
options {
  JDK_VERSION = "1.5";
  IGNORE_CASE = true;
  STATIC = true;
  //DEBUG_PARSER = true;
}
PARSER_BEGIN(PerfParser)
package perfcenter.parser;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.*;
import perfcenter.baseclass.*;
import perfcenter.baseclass.enums.*;
import perfcenter.baseclass.exception.*;
//import perfcenter.simulator.SimParams;
@SuppressWarnings("unused")
public class PerfParser
{

	static PerfParser parsr,parsr2;
	static Logger logger = Logger.getLogger("perflog");
	static ConsoleAppender appender = new ConsoleAppender(new PatternLayout());


  public static void main(String args[]) throws Exception {
  	int i=0;
  	String arg="none";
  	SolutionMethod m=SolutionMethod.NONE;
  	SystemType t=SystemType.NONE;
  	logger.setLevel((Level) Level.INFO);
  	logger.addAppender(appender);
  	ModelParameters.inputDistributedSystem = new DistributedSystem();
  	try {
  		while (i < args.length && args[i].startsWith("-")) {
            arg = args[i++];
            if (arg.equals("-a")) {
                m=SolutionMethod.ANALYTICAL;
                //System.out.println("Analytical solution");
            }else
            if (arg.equals("-s")) {
                m=SolutionMethod.SIMULATION;
                //System.out.println("Simulation ");
            }else
            if (arg.equals("-o")) {
                t=SystemType.OPEN;
            }else
            if (arg.equals("-c")) {
                t=SystemType.CLOSED;
            }
            if (arg.equals("-d")) {
                logger.setLevel((Level) Level.DEBUG);
            }
            if (arg.equals("-q")) {
                logger.setLevel((Level) Level.ERROR);
            }
        }
        if (i == args.length)
       	 	throw new Error("Usage:  java [-d] [-a|-s] perfcenter file");
        arg=args[i];
        parsr = new PerfParser(new java.io.FileInputStream(arg));
//        logger.info("Input file "+arg);
        ModelParameters.setSolutionMethod(m);
        ModelParameters.setSystemType(t);
//        logger.info("Started at "+Helper.timeNow());
        PerfParser.InputFile();
        //InputParams.ds.print();
//        logger.info("Completed at "+Helper.timeNow());
    }
    catch(java.io.FileNotFoundException e) {
        logger.error("PerfCenter:  File " + arg + " not found.");
        e.printStackTrace();
        return ;
    }
  }//End of main
}
PARSER_END(PerfParser)

SKIP :{
 	" "
|	"\r"
|	"\t"
|	"\n"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}




TOKEN : {
	<SCENARIO: "scenario"> |
	<END: "end"> |
	<VARIABLE: "variable"> |
	<DEVICE: "device"> |
	<PS: "ps"> | //scheduling policy
	<FCFS: "fcfs"> |
	<LCFS: "lcfs"> |
	<XCS: "xcs" >  |
	<DEPLOY: "deploy"> |
	<UNDEPLOY: "undeploy"> |
	<HOST: "host"> |
	<SERVER: "server"> |
	<COUNT: "count"> |
	<PROB: "prob"> | //prob of scenario
	<SYNC: "sync"> | //whether message is synchronous or not
	<SERVT: "servt"> | //service time
	<THREAD: "thread"> |
	<TASK: "task"> |
	<BUFFER: "buffer"> |
	<VIRTRES: "virtres"> | //virtual resource
	<SCHEDP: "schedp"> |
	<SPEEDUP: "speedup"> | //device speedup
	<TRUE: "true">|
	<FALSE: "false"> |

	//added by nikhil - memory model
 	<RAM : "ram"> |       // added by nikhil(memory model), host ram size
	<STATICSIZE: "staticsize">|       // added by nikhil(memory model), static size of software server
	<REQUESTSIZE: "requestsize">|      // added by nikhil(memory model), its request size
	<SIZE: "size">      | // added by nikhil(memory model), its thread size
	<WARNINGS: "warnings"> |//added by nikhil, you can get rid of warnings if you want

	// Keywords for power-management devices are added: Rakesh
	<POWERMANAGED: "power_managed">|
	<GOVERNOR: "governor">|
	<CONSERVATIVE: "conservative">|
	<ONDEMAND: "ondemand">|
	<PERFORMANCE: "performance">|
	<POWERSAVE: "powersave">|
	<USERSPACE: "userspace">|

	<POWERMANAGEMENT: "powermanagement">|
	<SPEEDLEVELS:"speed_levels">|
	<POWERCONSUMEDLEVELS:"power_consumed">|
    <IDLEPOWER:"idlepower">|
	<SETSPEEDLEVELINDEX: "setspeed_level_index">|
	<PROBEINTERVAL: "probe_interval">|
	<PROBEINTERVALDOWNFACTOR: "probe_interval_down_factor">|
	<GOVERNOR_UP_THRESHOLD: "governor_up_threshold" >|
	<GOVERNOR_DOWN_THRESHOLD: "governor_down_threshold" >
	}

TOKEN : {
	<LAN: "lan"> |
	<LINK: "link"> |
	<PROP: "prop"> |
	<TRANS: "trans"> |
	<HEADERSIZE: "headersize"> |
	<BYTES:"bytes">|
	<MS:"ms">|
	<US:"us">|
	<NS:"ns">|
	<KBPS:"Kbps">|
	<BPS:"bps">|
	<MBPS:"Mbps">|
	<GBPS:"Gbps">|
	<MTU: "mtu">
}

//Distributions
TOKEN : {
	<EXP: "exp"> |
	<NOR: "nor"> |
	<POI: "poi"> |
	<UNI: "uni"> |
	<BETA: "beta"> |
	<BINOM: "binom"> |
	<CHISQR: "chisqr"> |
	<GAMMA: "gamma"> |
        <CONST: "const">
}
//functions
TOKEN : {
	<RESPT: "respt"> 		|//
	<WAITT: "waitt"> 		|//
	<UTIL: "util">			|//
	<QLEN: "qlen">			|//
        <POWER : "power">             |
        <EPERR : "eperr">               |
        <PDP : "pdp">                   |
        <PEFF : "peff">                 |
	<TPUT : "tput">			|//
	<BPUT : "bput">			|//
	<GPUT : "gput">			|//
	<BUFFTIMEOUT : "buffTimeout">    |
	<DROPRATE : "droprate">          |
	<AVGSERVT : "avgservt">          |//
	<QPARMS : "qparms">		|//
	<BOTTLENECK : "bottleneck">	|
	<BLOCKPROB : "blockprob">	|//
	<PRINTCFG : "printcfg">		|//
	<ARATE : "arate">                |//
	<ANALYSE : "analyse">            |
        <INTERVAL: "interval">           |
        <FREQ: "freq">
}

//statements
TOKEN : {
	<FOREACH: "foreach">	|
	<FOR: "for">		|
	<TO: "to">				|
	<INCR: "incr">			|
	<DECR: "decr">			|
	<SET: "set">			|
	<PRINT: "print">		|
	<IN: "in">		|
	<AND:"and"> |
	<IF:"if"> |
	<THEN:"then"> |
	<ELSE:"else"> |
	<WHILE:"while"> |
	<BREAK:"break">|
	<BRANCH: "branch">
}

//Input and Simulation parameters
TOKEN : {
	<MODELPARAMS: "modelparams">	|//
	<LOADPARAMS: "loadparams">	|//
	<ANALYTICAL: "analytical">	|//
	<SIMULATION: "simulation">	|//
	<THINKTIME: "thinktime">	|//
	<TIMEOUT: "timeout">	|//
	<RETRYPROB: "retryProb">	|//
	<OPEN: "open">	|//
	<TYPE: "type">	|//
	<METHOD: "method">	|//
	<CLOSED: "closed">	|//
	<NOOFUSERS: "noofusers">	|//
	<NOOFREQUESTS: "noofrequests">		|//
        <SIMENDTIME:"simendtime">       |//
	<CONFINT: "confint">				|//
	<REPLICATIONNO: "replicationno">			|//
//	<SAMPLENO: "sampleno">			|//
	<STARTUPSAMPLENO: "startupsampleno">			|//
	<OUTPUT:"output">|//
	<COOLDOWNSAMPLENO: "cooldownsampleno">	|//
	<ENABLE : "enable"> |//
	<DISABLE : "disable">|//
        <MAXRETRY : "maxretry">|//
        <WORKLOAD : "workload">|//
        <CYCLIC : "cyclic">|//
        <CONSTANT  : "constant">//

}

TOKEN :{
 < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> > |
 <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">|
 < FILENAME :  ("/")* (<LETTER>(<LETTER>|<DIGIT>)* "/")* <LETTER>(<LETTER>|<DIGIT>)* "." (<LETTER>)+  >
}

TOKEN : {

 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  	<DIGITS : (<DIGIT>)+ >
|  	<#LETTER: ["A"-"Z","_","a"-"z"]>
|  	<#DIGIT: ["0"-"9"]>

}

void InputFile() throws DeviceNotFoundException,Exception:
{
	Task task;
	SoftServer serv;
	//Host host;
	Scenario sce;
	VirtualResource res;
	Statement stmt;
	//Expression aexp;
}
{
	(
		 DeviceDef() 		|
		 PowerManagementDef()|
		 VariableDef() 		|
	 	 LanDef() 			|
	 	 LanLinkDef()		|
		 res=VirtualResourceDef()	{ModelParameters.inputDistributedSystem.virRes.add(res);}	|
		 HostDef() 			|
		 task=TaskDef()     {ModelParameters.inputDistributedSystem.tasks.add(task);}		|
		 sce=ScenarioDef()	{ModelParameters.inputDistributedSystem.scenarios.add(sce);}	|
		 serv=ServerDef()	{ModelParameters.inputDistributedSystem.softServers.add(serv);}	|
		 DeployDef()	|
		 stmt=StatementDef(){stmt.execute();} |
		 LoadParamDef()|
		 ModelParamDef()|
		 UnDeployDef()|
                 ModelWorkLoad()
	)*
	<EOF>
}

void DeviceDef() : { 	Token name; }
{
	LOOKAHEAD(3)
  (<DEVICE>
  (name=DeviceName() {ModelParameters.inputDistributedSystem.devices.add(name.image); })*
  <END>)
  |<DEVICE> name=DeviceName(){ModelParameters.inputDistributedSystem.devices.add(name.image); }
}

void VariableDef() :  {Variable var; }
{
	LOOKAHEAD(4)
  (<VARIABLE>
  (var=VariableDetail(){ModelParameters.inputDistributedSystem.variables.add(var);})*
  <END>)
  |<VARIABLE> var=VariableDetail(){ModelParameters.inputDistributedSystem.variables.add(var);}
}

Variable VariableDetail():  { 	Token name; Token val; }
{
    name=VariableName() val=<NUMBER>
    {return new Variable(name.image,new Double(val.image));}
}

void LanDef() : { 	Token name; }
{
	LOOKAHEAD(3)
  (<LAN>
  (name=LanName() {ModelParameters.inputDistributedSystem.lans.add(new Lan(name.image)); })*
  <END>)
  |<LAN> name=LanName(){ModelParameters.inputDistributedSystem.lans.add(new Lan(name.image)); }
}
void LanLinkDef() :
{ 	Token n, name1,name2; 	LanLink l1;Token unit;Variable v;}
{
  <LINK> n=LinkName() name1=ValidLanName() name2=ValidLanName()
   { if(ModelParameters.inputDistributedSystem.isLink(name2.image,name1.image) == true){
   	  throw new Error("Line no:"+n.beginLine+" link with lan's "+name2.image+" and "+name1.image+" is already defined");
      }
   	l1 = new LanLink(n.image,name2.image,name1.image); }
     (
         <MTU>
	         v=Variable()
	         unit=<BYTES> {l1.addMTU(v,unit.image);}|
         <PROP>
         	v=Variable()
            (unit=<MS>|unit=<PS>|unit=<NS>|unit=<US>) {l1.addPropDelay(v, unit.image);}|
         <HEADERSIZE>
         	v=Variable()
            unit=<BYTES> {l1.addHeaderSize(v, unit.image);}|
         <TRANS>
           v=Variable()
           (unit=<BPS>|unit=<KBPS>|unit=<MBPS>|unit=<GBPS>) {l1.addTransRate(v,unit.image);}
      )*
  <END>
  {ModelParameters.inputDistributedSystem.getLan(name1.image).addConnectedLan(name2.image);
  ModelParameters.inputDistributedSystem.getLan(name2.image).addConnectedLan(name1.image);
  ModelParameters.inputDistributedSystem.links.add(l1);}
}
void HostDef()throws DeviceNotFoundException, Exception:{Token name,n;Host h;String hostnme="";}
{
	<HOST> name=HostName()"["n=<NUMBER>"]"
	{
		hostnme=name.image;
		h=new Host(hostnme,1);
	}
	(HostDetail(h))*
	<END>
	{
		ModelParameters.inputDistributedSystem.hosts.add(h);
		int totHosts =  new Integer(n.image);
		for(int i=2;i<=totHosts;i++){
			Host cpy = h.getCopy(hostnme,i);
			ModelParameters.inputDistributedSystem.hosts.add(cpy);
		}
	}
}


void HostDetail(Host h)throws DeviceNotFoundException, Exception:
	{ Token name;  Variable v;	SchedulingPolicy pol; PowerManagementGovernor gov;}	//local variables
{
   	//predefined addDeviceBuffer method is used for adding the size of ram.
   	 <RAM>	v=Variable() 					{h.addDeviceBuffer("ram", v);}
   |
   name=ValidDeviceName()
   (      <COUNT>  v=Variable() {h.addDeviceCount(name.image,v);}
	 |<BUFFER> v=Variable() {h.addDeviceBuffer(name.image,v);}
 	 |<SPEEDUP> v=Variable() {h.addDeviceSpeedUp(name.image,v);}
 	 |<SCHEDP>  pol=SchedPolicy(){h.addDeviceSchedPol(name.image,pol);}

     // PM device associated attributes. These are available only for PM device, added by rakesh
     // parses PM device name, governor, speed level is gov is userspace: rakesh
 	 |(<POWERMANAGED> { h.setDeviceAsPowerManaged(name.image); }
        ( <GOVERNOR> gov=PMGovernor() { h.addPMGovernor(name.image, gov); }
       	( <SETSPEEDLEVELINDEX> v=Variable()
       	 { 
              if(gov == PowerManagementGovernor.USERSPACE)
               {
                     h.addSetSpeedLevelIndex(name.image, v); 
                }
         } 
         )?
        )?
      )
     // parse probe interval, up_threshold, down_threshold
     |<PROBEINTERVAL> v=Variable() { h.addProbeInterval(name.image, v); }
	 |<GOVERNOR_UP_THRESHOLD> v=Variable() { h.addGovernorUpThreshold(name.image, v); }
	 |<GOVERNOR_DOWN_THRESHOLD> v=Variable() { h.addGovernorDownThreshold(name.image, v); }
   )
}

/****************************************************************************/
void PowerManagementDef() throws DeviceNotFoundException: { Token name;} // added by rakesh
{
    <POWERMANAGEMENT> name=ValidDeviceName()
	{
		// we have device name here; Set it's PowerManaged attributes here.
		// All devices having same device-name will inherit these attributes
		Device dev = new Device(name.image);
		ModelParameters.inputDistributedSystem.powerManagedDevicePrototypes.add(dev);
	}
	 ( PowerManagementDetails(name, dev) )*
	 <END>
       {
            if(dev.totalFrequencyLevels != dev.totalPowerLevels){
             throw new Error("Please provide the correct pair for Speed and Power levels :  Line:"+name.beginLine+" Column:"+name.beginColumn );
            }
            if(dev.totalFrequencyLevels != dev.totalIdlePowerLevels){
             throw new Error("Please provide the correct pair for Speed and Idle Power levels :  Line:"+name.beginLine+" Column:"+name.beginColumn );
        	}
    	}
}

void PowerManagementDetails(Token name, Device d)throws DeviceNotFoundException:
	{ Variable v;} // SchedulingPolicy pol; PowerManagementGovernor gov; }	//local variables
{
        <SPEEDLEVELS>
	 (  v=Variable() { d.addSpeedLevels(name.image, v);} )*  <END>
	 |(<POWERCONSUMEDLEVELS> (v=Variable() {d.addPowerConsumedLevels(name.image, v);} )* <END>
         <IDLEPOWER> (v=Variable() { d.addIdlePower(name.image, v);} )* <END> )
	 |<PROBEINTERVAL> v=Variable() { d.addProbeInterval(name.image, v); }
 	 |<GOVERNOR_UP_THRESHOLD> v=Variable()	 { d.addGovernorUpThreshold(name.image, v);	 }
 	 |<GOVERNOR_DOWN_THRESHOLD > v=Variable() {	d.addGovernorDownThreshold(name.image, v); } 
}

/**************************************************************************************/

Task TaskDef(): { 	Token name; 	Task task; 	}
{
	<TASK> name=TaskName() {task = new Task(name.image,name.beginLine);}
	 (TaskDetail(task))* <END>
	 {return task;}
}

void TaskDetail(Task t): { 	Token name; 	Distribution dist; VirtualResource res;}
{
	LOOKAHEAD(2)
	name=ValidDeviceName()  <SERVT> dist=Distribution()
	{t.addDeviceAndServiceTime(name.image,dist);}
	| name=ValidVirtualResName() {t.addVirtualRes(name.image);}
	| res=VirtualResourceDef() {t.addVirtualRes(res);}

}
void VirtualResDetail(VirtualResource t): { 	Token name; 	Distribution dist; VirtualResource res;Variable v;SchedulingPolicy pol;}
{
	LOOKAHEAD(2)
	name=ValidDeviceName()  <SERVT> dist=Distribution()
	{t.addDeviceAndServiceTime(name.image,dist);}
	 |<COUNT>  v=Variable() {t.setCount(v);}
	 |<BUFFER> v=Variable() {t.setBuffer(v);}
 	 |<SCHEDP>  pol=SchedPolicy(){t.setSchedPolicy(pol);}
	 |name=ValidVirtualResName(){t.addVirtualRes(name.image);}
}

VirtualResource VirtualResourceDef(): {  	Token name; VirtualResource res; }
{
	<VIRTRES> name=VirtualResName() {res = new VirtualResource(name.image);}
	 (VirtualResDetail(res))* <END>
	 {return res;}
}

SoftServer ServerDef(): { 	SoftServer serv; 	Token name; }
{
	<SERVER> name=ServerName(){serv = new SoftServer(name.image);} (ServerDetail(serv))* <END>
	{return serv;}
}

void ServerDetail(SoftServer serv): { Token name;  Variable v; SchedulingPolicy pol; }
{
  <STATICSIZE> v=Variable()  {serv.setStaticSize(v);}
  |
  <REQUESTSIZE> v=Variable()  {serv.setRequestSize(v);}
  |
  <THREAD>
   (
       <SIZE>   v=Variable() 		{serv.setThreadSize(v);}
      |<COUNT>   v=Variable() 		{serv.setThreadCount(v);}
	  |<BUFFER> v=Variable() 		{serv.setThreadBuffer(v);}
   	  |<SCHEDP> pol=SchedPolicy()	{serv.setSchedPolicy(pol);}

   )
  |
  <TASK> name=ValidTaskName()
  {
  	try{
  	 serv.addTask(ModelParameters.inputDistributedSystem.getTask(name.image));
  	 ModelParameters.inputDistributedSystem.getTask(name.image).addServer(serv.name);
  	}catch(Error e)
  	{
  		throw new Error("Line no "+name.beginLine+e.getMessage());
  	}
  }
}

Scenario ScenarioDef(): { 	Token scename; Variable v;	Scenario sce; Token t; }
{
	t=<SCENARIO> scename=ScenarioName() {sce= new Scenario(scename.image);}
	try{
		<PROB> v=Variable() {sce.setProbability(v);}
		ScenarioDetails(sce)
		<END>
		}catch(Error e){
			throw new Error("Lineno:"+t.beginLine+" "+e.getMessage());
		}
	{return sce;}
}
void ScenarioDetails(Scenario sce): { 	Node n2;  }
{
	{	Variable v = new Variable("local",1);
		Tree t = new Tree(v); Node n = new Node("root");
	}
	(n=ArcDef(t,n) )+
	(n2 = BranchDef(n) {t.addBranch(n,n2);})*
	{sce.rootNodeOfScenario = t.getRootNode();
	 sce.initialize();
	}
}

Node ArcDef(Tree t, Node n):{Token src,dest; Variable pktsize;boolean s;}
{
	src=ValidTaskName() dest=ValidTaskName() pktsize=Variable()	s=IsSync()
	{
		String src_server = ModelParameters.inputDistributedSystem.getTask(src.image).getServerName();
		String dest_server = ModelParameters.inputDistributedSystem.getTask(dest.image).getServerName();
		return t.addArc(n,src.image,src_server,dest.image,dest_server,pktsize,s);
	}
}

boolean IsSync():{}
{
	(<SYNC>{return true;})?
	{return false;}
}

Node BranchDef(Node nin):{Node n2;Variable v;}
{
   <BRANCH> <PROB>	v=Variable()
   {
 	  Tree t = new Tree(v);
 	  Node n = new Node("branch");
   }
   (n=ArcDef(t,n) )+
   (n2 = BranchDef(n) {t.addBranch(n,n2);})*
   <END>
   {return t.getRootNode();}
}
void DeployDef()throws Exception:{Token name1,name2,n; DeployStmt dply;  String hname="";}
{
	<DEPLOY>
	(
	    LOOKAHEAD(2)
		(name1=HostNameDef() name2=<IDENTIFIER>)
		|
		(name1=<IDENTIFIER> name2=HostNameDef())
	)
	{
		try{
			 dply = new DeployStmt(name1.image,name2.image); dply.deploy();}
		catch(Error e)
		{throw new Error("Wrong Deployment!  Line no:"+name1.beginLine+e.getMessage());}
	}
}

void UnDeployDef()throws Exception:{Token name1,name2,n;UnDeployStmt dply;String hname="";}
{
	<UNDEPLOY>
	(
	    LOOKAHEAD(2)
		(name1=HostNameDef() name2=<IDENTIFIER>)
		|
		(name1=<IDENTIFIER> name2=HostNameDef())
	)
	{
		try{
			dply = new UnDeployStmt(name1.image,name2.image); dply.undef();}
		catch(Error e)
		{throw new Error("Wrong UnDeploy!  Line no:"+name1.beginLine+e.getMessage());}
	}
}

Variable Variable():{Token varname;Token t;}
{
	varname=ValidVariableName()
	{
		Variable v = ModelParameters.inputDistributedSystem.getVariable(varname.image);
		v.updateUsedInfo();
		return v;
	}
	|
	t=<NUMBER>
	{
	   	Variable var = new Variable("local",new Double(t.image));
	   	return var;
	}
}
Distribution Distribution(): { 	Variable var;}
{
	{Distribution d = new Distribution();}
	(
		 var = Variable() {d.addParam1(var);}
		 |<EXP> {d.addName("exp");}
		 "("
		 var = Variable() {d.addParam1(var);}
		 ")"
	     |<POI> {d.addName("poi");}
	     "("
	      var = Variable() {d.addParam1(var);}
	     ")"
	     |<NOR> {d.addName("nor");}
	     "("
	     var = Variable() {d.addParam1(var);}
	     ","
	     var = Variable() {d.addParam2(var);}
	     ")"
	     |<UNI>
	     "("
	     var = Variable() {d.addParam1(var);}
	     ","
	     var = Variable() {d.addParam2(var);}
	     ")"
	     |<BETA>
	     "("
	     var = Variable() {d.addParam1(var);}
	     ","
	     var = Variable() {d.addParam2(var);}
	     ")"
	     |<BINOM>
	     "("
	     var = Variable() {d.addParam1(var);}
	     ","
	     var = Variable() {d.addParam2(var);}
	     ")"
	     |<CHISQR>
	     "("
	     var = Variable() {d.addParam1(var);}
	     ")"
	     |<GAMMA>
	     "("
	     var = Variable() {d.addParam1(var);}
	     ","
	     var = Variable() {d.addParam2(var);}
	     ")"
             |<CONST>{d.addName("const");}
             "("
             var = Variable() {d.addParam1(var);}
             ")"
             
     )
	 {
	 	d.calculateMean();
	 	return d;
	 }
}
SchedulingPolicy SchedPolicy():{}
{
	<PS> { return SchedulingPolicy.PS;} |
	<LCFS> { return SchedulingPolicy.LCFS;} |
	<FCFS> {return SchedulingPolicy.FCFS;} |
	<XCS> {return SchedulingPolicy.XCS;} | 	 
}

//Validations: Checks if name is already defined
Token ServerName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isServer(t.image)==true)
		throw new Error("Server "+t.image+" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}
Token HostNameDef(): { 	Token t,n;String hostnme=""; }
{
		t=<IDENTIFIER>"["n=<NUMBER>"]"
	{
		t.image = t.image+"["+n.image+"]";
		return(t);
	}
}
Token HostName(): { 	Token t,n;String hostnme=""; }
{
		t=<IDENTIFIER>
	{
		hostnme = t.image;
		if(ModelParameters.inputDistributedSystem.isHost(hostnme)==true)
		throw new Error("Host "+hostnme+" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}
Token TaskName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isTask(t.image)==true)
		throw new Error("Task \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}
Token ScenarioName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isScenario(t.image)==true)
		throw new Error("Scenario \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}
Token DeviceName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isDevice(t.image)==true)
		throw new Error("Device \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}
Token VirtualResName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isVirtualRes(t.image)==true)
			throw new Error("Virtual Resource \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}
Token VariableName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isVariable(t.image)==true)
		throw new Error("Variable \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
  	     return(t);

	}
}
Token LanName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isLan(t.image)==true)
			throw new Error("Lan \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}
Token LinkName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		if(ModelParameters.inputDistributedSystem.isLink(t.image)==true)
			throw new Error("Link \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn +" already defined!");
		else
		return(t);
	}
}

//Validations: checks if the give name exists
Token ValidServerName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		try{ModelParameters.inputDistributedSystem.getServer(t.image); return(t);}
  	    catch (Error e)
  	    	{throw new Error("Undefined server \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );}

	}
}
Token ValidHostName(): { 	Token t,n;String hostnme=""; }
{
		t=<IDENTIFIER>"["n=<NUMBER>"]"
	{
		try{
  		    hostnme = t.image+"["+n.image+"]";
			ModelParameters.inputDistributedSystem.getHost(hostnme);
			t.image = hostnme;
			return(t);
		}catch (Error e)
  	    	{throw new Error("Undefined host \""+hostnme+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );}
	}
}
Token ValidTaskName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		try{ModelParameters.inputDistributedSystem.getTask(t.image); return(t);}
  	    catch (Error e)
  	    	{throw new Error("Undefined task \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );}

	}
}
Token ValidScenarioName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		try{ModelParameters.inputDistributedSystem.getScenario(t.image);return(t);}
  	    catch (Error e)
  	    	{throw new Error("Undefined scenario \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );}

	}
}
Token ValidDeviceName(): { 	Token t; }
{
	t=<IDENTIFIER>
	//Code change needed here to accept keyword "ram" as a valid device. If device is ram,
	//then we should either not check done as below, or we should initialize host declaration with ram
	//device already added
	{
		try{ModelParameters.inputDistributedSystem.getDevice(t.image);return(t);}
  	    catch (Error e)
  	    	{throw new Error("Undefined device \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );}

	}
}
Token ValidVirtualResName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		try{ModelParameters.inputDistributedSystem.getVirtualRes(t.image);return(t);}
  	    catch (Error e)
  	    	{throw new Error("Undefined Virtual Resource \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );}

	}
}
Token ValidVariableName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		try{ModelParameters.inputDistributedSystem.getVariable(t.image);return(t);}
		catch (Error e)
  	    	{throw new Error("Undefined variable \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );	}
	}
}
Token ValidLanName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		try{ModelParameters.inputDistributedSystem.getLan(t.image); return(t);}
		catch (Error e)
  	    	{throw new Error("Undefined Lan \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );	}
	}
}
Token ValidLinkName(): { 	Token t; }
{
	t=<IDENTIFIER>
	{
		try{ModelParameters.inputDistributedSystem.getLink(t.image); return(t);}
		catch (Error e)
  	    	{throw new Error("Undefined Lan \""+t.image+"\" Line:"+t.beginLine+" Column:"+t.beginColumn );	}
	}
}

/******************************************************************/
PowerManagementGovernor PMGovernor():{} // added by rakesh
{
	<CONSERVATIVE>{ return PowerManagementGovernor.CONSERVATIVE;}
	| <ONDEMAND>{ return PowerManagementGovernor.ONDEMAND;}
	| <PERFORMANCE>{ return PowerManagementGovernor.PERFORMANCE;}
	| <POWERSAVE>{ return PowerManagementGovernor.POWERSAVE;}
	| <USERSPACE>{ return PowerManagementGovernor.USERSPACE;}
}
/******************************************************************/

Statement StatementDef() throws Exception:
{SetStmt set;PrintStmt prn;ForStmt fstmt;ForEachStmt festmt;IfStmt ifstmt;WhileStmt wstmt;Expression exp;}
{
	{Statement stmt = new Statement();}
	(
		set=SetStm() 	{ stmt.addSetStmt(set);}
		| prn=PrintStm() {stmt.addPrintStmt(prn);}
	    | festmt=ForEachDef() {stmt.addForEachStmt(festmt);}
		| fstmt=ForDef() {stmt.addForStmt(fstmt);}
		| ifstmt=IfStmt() {stmt.addIfStmt(ifstmt);}
		| wstmt=WhileStmt() {stmt.addWhileStmt(wstmt);}
		| exp=Expression() {stmt.addExpression(exp);}
		|<BREAK>{stmt.addBreakStmt();}
	)
	{   return stmt; }
}

PrintArgument PrintArg() throws Exception:
{Token t; Expression aexp;}
{
    {PrintArgument parg = new PrintArgument();}
	(
		aexp=Expression() {parg.addExpression(aexp);}
		|
		t=<STRING_LITERAL>  {parg.addMessage(t.image);}
	)
	{return parg;}
}
PrintStmt PrintStm() throws Exception:
{Token t; PrintArgument pa;}
{
	t=<PRINT> {PrintStmt prn = new PrintStmt(t.beginLine);}
	(
		pa=PrintArg()	{prn.addArgument(pa);}
	)
	(
		"+"
		pa=PrintArg()	{prn.addArgument(pa);}
	)*
	{return prn;}
}

SetStmt SetStm():
{
	Token num,name1,name2;
	Distribution dist; SchedulingPolicy pol;
	Token t,t1,t2;
	Variable v;
}
{
	t=<SET> {SetStmt set = new SetStmt(t.beginLine);}
	(
	   LOOKAHEAD(5)
       (name1=ValidHostName()":"  {set.addHost(name1.image);   }
         (
            LOOKAHEAD(3)
            (name2=ValidServerName()":"<THREAD>":" {set.addServer(name2.image);   }
              (<COUNT>  num=<NUMBER>  {set.addCount(new Double(num.image));}
              |<BUFFER>  num=<NUMBER> {set.addBuffer(new Double(num.image));}
              |<SCHEDP>  pol=SchedPolicy() {set.addSchedulingPolicy(pol);}
              )
            )
            |
            (name2=ValidDeviceName()":"{set.addDevice(name2.image);   }
              (<COUNT>  num=<NUMBER>  {set.addCount(new Double(num.image));}
              |<BUFFER>  num=<NUMBER> {set.addBuffer(new Double(num.image));}
              |<SCHEDP>  pol=SchedPolicy() {set.addSchedulingPolicy(pol);}
              |<PROBEINTERVAL> v=Variable() {set.addProbeInterval(v);}
              |<GOVERNOR_UP_THRESHOLD> v=Variable() {set.addGovUpThreshold(v);}
              |<GOVERNOR_DOWN_THRESHOLD> v=Variable() {set.addGovDownThreshold(v);}
              )
            )
          )
       )
       |
       LOOKAHEAD(5)
       (name1=ValidLanName()":" {set.addLan(name1.image);}
        name2=ValidLanName()":" {set.addLan(name2.image);}
        (  <MTU>  t1=<NUMBER> t2=<IDENTIFIER> {set.addMTU(new Double(t1.image),t2.image);}
          |<PROP>   t1=<NUMBER> t2=<IDENTIFIER> {set.addPropDelay(new Double(t1.image),t2.image);}
          |<TRANS>  t1=<NUMBER> t2=<IDENTIFIER> {set.addTransRate(new Double(t1.image),t2.image);}
        )
       )
       |
        LOOKAHEAD(5)
       (name1=ValidTaskName()":" {set.addTask(name1.image);}
        name2=ValidDeviceName()":"{set.addDevice(name2.image);}
        <SERVT>  dist=Distribution(){set.addServiceTime(dist);}
       )
       |
       (name1=ValidScenarioName()":"<PROB>  t=<NUMBER>)
       {set.addScenario(name1.image);set.addProbability(new Double(t.image));}
	)
	{return set;}
}

FunctionDefinition FunctionDef():{Token name1;Token t;}
{
	{FunctionDefinition fdef = new FunctionDefinition();}
	(
	(LOOKAHEAD(5)
	(
	  (t=<PRINTCFG>"()" {fdef.addFunction(t.image);}

	  )
	  |
	  (t=<RESPT> | t=<TPUT>|t=<BPUT>|t=<GPUT> |t=<BLOCKPROB>|t=<ARATE>|t=<BUFFTIMEOUT>|t=<DROPRATE>)   {fdef.addFunction(t.image);}
      (
	    ("()" {fdef.addScenario("eters");})
	    |
	    "("
	    (
	      name1=ValidScenarioName(){fdef.addScenario(name1.image);}
	    )
	    ")"
	  )
	  ("[" t=<NUMBER>{fdef.addSlot(t.image);} "]")?	)
	|
	(
	  (t=<RESPT> | t=<TPUT> | t=<BPUT> |t=<GPUT>|t=<BLOCKPROB>|t=<ARATE>|t=<WAITT> |t=<UTIL> |t=<QLEN>|t=<AVGSERVT>|t=<QPARMS> |t=<BUFFTIMEOUT>|t=<DROPRATE>|t=<POWER>|t=<EPERR>| t=<PDP> | t=<PEFF> | t=<FREQ> ){fdef.addFunction(t.image);}
	  (


	   	"("

	   			(LOOKAHEAD (2) t=HostNameDef()| t=<IDENTIFIER>) {fdef.addTemp1(t.image);}
	   			":" (t=<IDENTIFIER> | t=<RAM>) {fdef.addTemp2(t.image);}
	   			( LOOKAHEAD(1) ")" | (":" (t=<IDENTIFIER> | t=<RAM>) {fdef.addTemp3(t.image);} ")" )  )


	  )
	  ("[" (t=<NUMBER>){fdef.addSlot(t.image);} "]")?
	)
	)
	|
	(
	    (t=<ANALYSE> |t=<BOTTLENECK> ) {fdef.addFunction(t.image);}
	    (
	      (
	        "()" {fdef.addNumber(-99.0);}
	      )
	      |
	      "("
	         t=<NUMBER> {fdef.addNumber(new Double(t.image));}
	      ")"
	    )
	)
	)
    {fdef.lineno=t.beginLine; return fdef;}
}

ForEachStmt ForEachDef()throws Exception:{Token name;Statement stmt;Token t;ForEachStmt lstmt;int index=0;}
{
	<FOREACH> {lstmt = new ForEachStmt();}
	   name=ValidVariableName() {lstmt.addVariable(name.image);}
	   (","name=ValidVariableName() {lstmt.addVariable(name.image);})*
	   <IN>
	   "("
	   (t=<NUMBER> {lstmt.addVarValue(0,new Double(t.image));})
	   (","t=<NUMBER> {lstmt.addVarValue(0,new Double(t.image));})*
	   ")"
	   (
	   		"," {index++;}
	   		"("
	   		(t=<NUMBER> {lstmt.addVarValue(index,new Double(t.image));})
	   		(","t=<NUMBER> {lstmt.addVarValue(index,new Double(t.image));})*
	   		")"
	   )*
	(stmt=StatementDef(){lstmt.addStatement(stmt);})+
	<END>
	{return lstmt;}
}

ForStmt ForDef() throws Exception:{ForStmt fstmt;Statement stmt;Token t,name;}
{
	<FOR> {fstmt = new ForStmt();}
	   name=ValidVariableName() {fstmt.addVariable(name.image);}
	   "="
	   t=<NUMBER> {fstmt.addStartVar(new Double(t.image));}
	   "to"
	   t=<NUMBER> {fstmt.addEndVar(new Double(t.image));}
	   <INCR>  t=<NUMBER> {fstmt.addIncrVal(new Double(t.image));}
	(stmt=StatementDef(){fstmt.addStatement(stmt);})+
	<END>
	{ return fstmt;	}
}
IfStmt IfStmt() throws Exception:{Expression exp;Statement stmt;}
{
	{IfStmt ifstmt = new IfStmt();}
	(
		<IF> "("
		exp=Expression() {ifstmt.addExpression(exp);}
		")" <THEN>
		(stmt=StatementDef() {ifstmt.addStatement(stmt);})*
		[
			LOOKAHEAD(2)
			<ELSE>
			(stmt=StatementDef() {ifstmt.addElseStatement(stmt);})*
		]
		<END>
	)
	{return ifstmt;}
}
WhileStmt WhileStmt() throws Exception:{Expression exp;Statement stmt;}
{
	{WhileStmt wstmt = new WhileStmt();}
	(
		<WHILE> "("
		exp=Expression() {wstmt.addExpression(exp);}
		")"
		(stmt=StatementDef() {wstmt.addStatement(stmt);})*
		<END>
	)
	{return wstmt;}
}

Expression Expression()throws Exception:
{Token name; Expression a;LogicalExpression lexp;}
{
	{Expression aexp = new Expression();}
	(
		LOOKAHEAD(ValidVariableName() "=")
		name=ValidVariableName() {Variable v=ModelParameters.inputDistributedSystem.getVariable(name.image);
	                          aexp.addVariable(v);}
		"="
		a=Expression() {aexp.addExpression(a);}
		|
		lexp=LogicalExpression() {aexp.addLogicalExpression(lexp);}
    )
	{return aexp;}
}
LogicalExpression LogicalExpression() throws Exception: {LogicalANDExpression land; LogicalExpression l;}
{
	{LogicalExpression lexp = new LogicalExpression();}
	(
	   land=LogicalANDExpression() {lexp.addLogicalANDExpression(land);}
	   [
	      "||" {lexp.addOperation("||");}
	      l=LogicalExpression() {lexp.addLogicalExpression(l);}
	   ]
	)
	{return lexp;}
}

LogicalANDExpression LogicalANDExpression() throws Exception: {EqualityExpression eexp; LogicalANDExpression l;}
{
	{LogicalANDExpression lexp = new LogicalANDExpression();}
	(
	  eexp=EqualityExpression() {lexp.addEqualityExpression(eexp);}
	  [ "&&" {lexp.addOperation("&&");}
	     l=LogicalANDExpression() {lexp.addLogicalANDExpression(l);}
	  ]
	)
	{return lexp;}
}

EqualityExpression EqualityExpression() throws Exception: {RelationalExpression rex;EqualityExpression e; }
{
	{EqualityExpression eex = new EqualityExpression();}
	(
		rex=RelationalExpression() {eex.addRelationalExpression(rex);}
		[
		  (
		   "=="  {eex.addOperation("==");}
		   | "!=" {eex.addOperation("!=");}
		   )
		   e=EqualityExpression() {eex.addEqualityExpression(e);}
		 ]
	)
	{return eex;}
}

RelationalExpression RelationalExpression() throws Exception: {AdditiveExpression a;RelationalExpression r;}
{
	{RelationalExpression rex = new RelationalExpression();}
	(
		a=AdditiveExpression() {rex.addAdditiveExpression(a);}
		[
			( "<" {rex.addOperation("<");}
			| ">" {rex.addOperation(">");}
			| "<=" {rex.addOperation("<=");}
			| ">=" {rex.addOperation(">=");}
			)
			r=RelationalExpression() {rex.addRelationalExpression(r);}
		]
	)
	{return rex;}
}

AdditiveExpression AdditiveExpression()throws Exception: {MultiplicativeExpression mex;AdditiveExpression a;}
{
	{AdditiveExpression aex = new AdditiveExpression();}
    (
	    mex=MultiplicativeExpression()   {aex.addMultiplicativeExpression(mex);}
	    [
	    	LOOKAHEAD(2)
	    	(
	    		"-"    {aex.addOperation("-");}
		    	|   "+"    	{aex.addOperation("+");}
		    )
	     	a=AdditiveExpression() {aex.addAdditiveExpression(a);}
	    ]
    )
   { return aex; }
}

MultiplicativeExpression MultiplicativeExpression()throws Exception:{UnaryExpression uex;MultiplicativeExpression m;}
{
	{MultiplicativeExpression mex = new MultiplicativeExpression();}
	(
	    uex=UnaryExpression()    {mex.addUnaryExpression(uex);}
	    [
	       (     "*"    {mex.addOperation("*");}
	       |   "/"    	{mex.addOperation("/");}
	       )
	    	m=MultiplicativeExpression() {mex.addMultiplicativeExpression(m);}
	    ]
    )
    { return mex; }
}

UnaryExpression UnaryExpression()throws Exception:{ PrimaryExpression pex;}
{
	{UnaryExpression uex = new UnaryExpression();}
	(
    "-" pex=PrimaryExpression()     { uex.addPrimaryExpression(pex); uex.addNegate(); }
	|   pex=PrimaryExpression()         { uex.addPrimaryExpression(pex); }
	)
	{return uex;}
}

PrimaryExpression PrimaryExpression() throws Exception:
{Token name;FunctionDefinition func;Token t;Expression a;}
{
	{PrimaryExpression pex = new PrimaryExpression();}
	(
	   	name=ValidVariableName()
	   	{	Variable v= ModelParameters.inputDistributedSystem.getVariable(name.image);
	   		pex.addVariable(v);
	   	}
	   	|t=<NUMBER> { pex.addNumber(new Double(t.image));}
	   	|
	   	LOOKAHEAD(3)
	   	func=FunctionDef() {pex.addFuncDef(func);}
		| "(" a=Expression() ")"    { pex.addExpression(a); }
	)
	{return pex;}
}

void ModelParamDef() : { Variable var;	Token t;boolean res; Distribution dis;}
{

  (<MODELPARAMS>
   (
   	<TYPE>			  	(t=<OPEN>|t=<CLOSED>)
   	{if(t.image.compareToIgnoreCase("open")==0)
   		{ModelParameters.setSystemType(SystemType.OPEN);}
   	 else {ModelParameters.setSystemType(SystemType.CLOSED);}
   	}
   	|
   	<METHOD>			(t=<ANALYTICAL>|t=<SIMULATION>)
   	{if(t.image.compareToIgnoreCase("analytical")==0)
   		{ModelParameters.setSolutionMethod(SolutionMethod.ANALYTICAL);
//   		logger.info("Method:Analytical");
		}
   	 else {ModelParameters.setSolutionMethod(SolutionMethod.SIMULATION);
//   	 	   logger.info("Method:Simulation");
   	      }
   	}
   	|
   	<WARNINGS>			(t=<ENABLE>|t=<DISABLE>)
   	{if(t.image.compareToIgnoreCase("enable")==0)
   		{ModelParameters.setWarnings(Warnings.ENABLE);
//   		logger.info("Warnings:enable");
		}
   	 else {ModelParameters.setWarnings(Warnings.DISABLE);
//   	 	   logger.info("Warnings:disable");
   	      }
   	}
   	|
	<NOOFREQUESTS>		t=<NUMBER> {ModelParameters.addNoOfRequests(new Double(t.image));}|
         <SIMENDTIME>           var = Variable() {ModelParameters.addSimulationEndTime(var);}   |
	<CONFINT>			res=IsBool() {ModelParameters.setConfIntervalsEnabled(res);}	|
	<REPLICATIONNO>		t=<NUMBER> {ModelParameters.addNoOfReplications(new Double(t.image));}	|
//	<SAMPLENO>			t=<NUMBER>{ModelParameters.addTotalNumSamples(new Double(t.image));}|
	<STARTUPSAMPLENO>	t=<NUMBER>{ModelParameters.addStartUpSampleNo(new Double(t.image));}		|
//	<COOLDOWNSAMPLENO>	t=<NUMBER> {ModelParameters.addCoolDownSampleNo(new Double(t.image));}  |
	<QLEN>				t=<NUMBER>{ModelParameters.addQlencilevel(new Double(t.image));}  |
        <TPUT>				t=<NUMBER>{ModelParameters.addTputcilevel(new Double(t.image));}  |
	<UTIL>				t=<NUMBER>{ModelParameters.addUtilcilevel(new Double(t.image));}  |
	<RESPT>				t=<NUMBER>{ModelParameters.addResptcilevel(new Double(t.image));} |
	<OUTPUT>            t=<FILENAME>{ModelParameters.addOutputFile(t.image);}

   )*
   <END>
  )

}

//Workload type parsing added by yogesh
void ModelWorkLoad() : { Variable var; Token t;}
{
    (<WORKLOAD> t=<CYCLIC>
         (WorkloadDetails())*
        <END>
      )  
}

void WorkloadDetails() :{Variable var;}
{
         <ARATE> (var=Variable() {ModelParameters.addArrivalRates(var);})* <END>
           | <NOOFUSERS> (var=Variable() {ModelParameters.addNumberOfUsers(var);})* <END>
     
           | <INTERVAL> (var=Variable() {ModelParameters.addIntervalSlots(var);})* <END>
}

void LoadParamDef() : { Variable var;	Token t;boolean res; Distribution dis;}
{

  (<LOADPARAMS>
   (
    <THINKTIME>         dis=Distribution(){ModelParameters.addThinkTime(dis);}|
    <TIMEOUT>         dis=Distribution(){ModelParameters.addTimeout(dis);}|
    <RETRYPROB>		   var=Variable() {ModelParameters.addRetryProbability(var);}|
	<ARATE>		         var=Variable() {ModelParameters.addArrivalRate(var);}|
	<NOOFUSERS>		    var=Variable() {ModelParameters.addNoOfUsers(var);}|
       <MAXRETRY>              var=Variable(){ModelParameters.addMaxRetry(var);}
   )*
   {ModelParameters.isModified=true;}
   <END>
  )

}

boolean IsBool():{}
{
	<TRUE> {return true;}|
	<FALSE> {return false;}
}
